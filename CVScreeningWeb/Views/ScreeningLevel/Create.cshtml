@using CVScreeningWeb.Helpers
@using CVScreeningWeb.Resources
@using Kendo.Mvc.UI
@model CVScreeningWeb.ViewModels.ScreeningLevel.ScreeningLevelFormViewModel

@{
    ViewBag.Title = Common.SubmitTitle + " " + ScreeningLevel.Object;
    ViewBag.PanelClass = CSSHelper.SINGLE_COLUMN_FORM_CLASS;
    ViewBag.IsKendoEnabled = true;
}

@Html.ValidationSummary()

@using (Html.BeginForm("Create", "ScreeningLevel", FormMethod.Post, new {@class = "form-horizontal"}))
{
    @Html.AntiForgeryToken()
    <fieldset>
            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.ContractReference).Class(CSSHelper.LABEL_CONTROL_CLASS)
                <div class=@CSSHelper.INPUT_DIV_CLASS>
                    @Html.Bootstrap().TextBoxFor(m => m.ContractReference).Class("form-control").Readonly()
                    @Html.ValidationMessageFor(m => m.ContractReference)
                </div>
            </div>

            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.ContractYear).Class(CSSHelper.LABEL_CONTROL_CLASS)
                <div class=@CSSHelper.INPUT_DIV_CLASS>
                    @Html.Bootstrap().TextBoxFor(m => m.ContractYear).Class("form-control").Readonly()
                    @Html.ValidationMessageFor(m => m.ContractYear)
                </div>
            </div>

            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.ScreeningLevelName).Class(CSSHelper.LABEL_CONTROL_CLASS)
                <div class=@CSSHelper.INPUT_DIV_CLASS>
                    @Html.Bootstrap().TextBoxFor(m => m.ScreeningLevelName).Class("form-control")
                    @Html.ValidationMessageFor(m => m.ScreeningLevelName)
                </div>
            </div>

            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.Description).Class(CSSHelper.LABEL_CONTROL_CLASS)
                <div class=@CSSHelper.INPUT_DIV_CLASS>
                    @Html.Bootstrap().TextAreaFor(m => m.Description).Class("form-control")
                    @Html.ValidationMessageFor(m => m.Description)
                </div>
            </div>
            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.StartDate).Class(CSSHelper.LABEL_CONTROL_CLASS)
                <div class="col-md-3">
                    @(Html.Kendo().DatePickerFor(m => m.StartDate)
                          .Format("dd/MM/yyyy"))
                    @Html.ValidationMessageFor(m => m.StartDate)
                </div>
                @Html.Bootstrap().LabelFor(m => m.EndDate).Class(CSSHelper.LABEL_CONTROL_CLASS)
                <div class="col-md-3">
                    @(Html.Kendo().DatePickerFor(m => m.EndDate)
                          .Format("dd/MM/yyyy"))
                    @Html.ValidationMessageFor(m => m.EndDate)
                </div>
            </div>
            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.TurnaroundTime).Class(CSSHelper.LABEL_CONTROL_CLASS)
                <div class=@CSSHelper.INPUT_DIV_CLASS>
                    @Html.Bootstrap().TextBoxFor(m => m.TurnaroundTime).Class("form-control")
                    @Html.ValidationMessageFor(m => m.TurnaroundTime)
                </div>
            </div>
        <div class="form-group">
            @Html.Bootstrap().LabelFor(m => m.AllowedToContact).Class(CSSHelper.LABEL_CONTROL_CLASS)
            <div class=@CSSHelper.INPUT_DIV_CLASS>
                @Html.Bootstrap().CheckBoxFor(m => m.AllowedToContact)
                @Html.ValidationMessageFor(m => m.AllowedToContact)
            </div>
        </div>
        @Html.EditorFor(m => m.AllowedToContactCurrentCompany)
            <div class="form-group">
                @Html.Bootstrap().LabelFor(m => m.Language).Class(CSSHelper.LABEL_CONTROL_CLASS)
                <div class=@CSSHelper.INPUT_DIV_CLASS>
                    @(Html.Kendo().DropDownListFor(m => m.Language)
                          .HtmlAttributes(new {@class = "form-control", required = "required"})
                          .BindTo(new List<string>
                          {
                              "Bahasa Indonesia", "English"
                          }))
                    @Html.ValidationMessageFor(m => m.Language)
                </div>
            </div>
            <div class="form-group">
                @Html.Bootstrap().Label(ScreeningLevel.TypeOfChecks).Class(CSSHelper.LABEL_CONTROL_CLASS)
                <div class="col-md-1"></div>
                <div class="col-md-8">
                    <label class="col-md-12 control-label" style="text-align: center" for="@ScreeningLevel.Comments">Comments
                    </label>                
                </div>
            </div>
        @for (int i = 0; i < Model.TypeOfChecks.Count; i++)
        {
            <div class="form-group">
                @Html.Bootstrap().Label(Model.TypeOfChecks[i].TypeOfCheckBox.Text).Class(CSSHelper.LABEL_CONTROL_CLASS)
                <div class="col-md-1">
                    @Html.CheckBoxFor(m => m.TypeOfChecks[i].TypeOfCheckBox.Checked)
                    @Html.HiddenFor(m => m.TypeOfChecks[i].TypeOfCheckId)
                </div>
                <div class="col-md-8">
                    @Html.Bootstrap().TextBoxFor(m => m.TypeOfChecks[i].TypeOfCheckScreeningComments).Class("form-control")
                </div>
            </div>
        }
        <div>@Html.HiddenFor(m => m.ContractId)</div>
            <br />
            <br />
            <div class="form-group">
                <div class="col-lg-offset-3 col-lg-8">
                    @Html.Bootstrap().SubmitButton().Text(Common.Submit)
                    @Html.ActionLink(Common.Cancel, "Index", "ScreeningLevel", new { id = Model.ContractId }, new { Class = "btn  btn-default" })
                </div>
            </div>
    </fieldset>
}

<script>
    
    $( document ).ready(function(){

        // Check that there is no both education check standard and evidence that are selected
        var checkEducationChecks = function(eventObject) {
            if ($('#TypeOfChecks_0__TypeOfCheckBox_Checked').is(":checked")
                && $('#TypeOfChecks_1__TypeOfCheckBox_Checked').is(":checked")) {
                alert("You cannot select both 'Education check standard' and 'Education check with evidence'");
                eventObject.prop('checked', false);
            }
        };

        // Check that there is no both employment check standard and performance that are selected
        var checkEmploymentChecks = function (eventObject) {
            if ($('#TypeOfChecks_2__TypeOfCheckBox_Checked').is(":checked")
                && $('#TypeOfChecks_3__TypeOfCheckBox_Checked').is(":checked")) {
                alert("You cannot select both 'Employment check standard' and 'Employment check performance'");
                eventObject.prop('checked', false);
            }
        };

        // Check that there is no both litigation check civil and criminal or civil and criminal that are selected
        var checkLitigationChecks = function (eventObject) {
            if (($('#TypeOfChecks_5__TypeOfCheckBox_Checked').is(":checked") && $('#TypeOfChecks_6__TypeOfCheckBox_Checked').is(":checked"))
                || ($('#TypeOfChecks_5__TypeOfCheckBox_Checked').is(":checked")) && $('#TypeOfChecks_7__TypeOfCheckBox_Checked').is(":checked")
                || ($('#TypeOfChecks_6__TypeOfCheckBox_Checked').is(":checked")) && $('#TypeOfChecks_7__TypeOfCheckBox_Checked').is(":checked")) {
                alert("You cannot select in the same time 'Litigation check civil' and/or 'Litigation check criminal' and/or 'Litigation check civil and criminal'");
                eventObject.prop('checked', false);
            }
        };

        // Check that there is no both media check simplified and comprehensive that are selected
        var checkMediaChecks = function (eventObject) {
            if ($('#TypeOfChecks_10__TypeOfCheckBox_Checked').is(":checked")
                && $('#TypeOfChecks_11__TypeOfCheckBox_Checked').is(":checked")) {
                alert("You cannot select both 'Media check simplified' and 'Media check comprehensive'");
                eventObject.prop('checked', false);
            }
        };

        $('#TypeOfChecks_0__TypeOfCheckBox_Checked').click(function () {
            checkEducationChecks($(this));
        });

        $('#TypeOfChecks_1__TypeOfCheckBox_Checked').click(function () {
            checkEducationChecks($(this));
        });

        $('#TypeOfChecks_2__TypeOfCheckBox_Checked').click(function () {
            checkEmploymentChecks($(this));
        });

        $('#TypeOfChecks_3__TypeOfCheckBox_Checked').click(function () {
            checkEmploymentChecks($(this));
        });

        $('#TypeOfChecks_5__TypeOfCheckBox_Checked').click(function () {
            checkLitigationChecks($(this));
        });

        $('#TypeOfChecks_6__TypeOfCheckBox_Checked').click(function () {
            checkLitigationChecks($(this));
        });

        $('#TypeOfChecks_7__TypeOfCheckBox_Checked').click(function () {
            checkLitigationChecks($(this));
        });

        $('#TypeOfChecks_10__TypeOfCheckBox_Checked').click(function () {
            checkMediaChecks($(this));
        });

        $('#TypeOfChecks_11__TypeOfCheckBox_Checked').click(function () {
            checkMediaChecks($(this));
        });
    });

</script>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")

}