//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections;
using System.Linq;
using CVScreeningCore.Exception;
using CVScreeningCore.Models.AtomicCheckState;
using CVScreeningCore.Models.AtomicCheckValidationState;
using CVScreeningCore.Models.ScreeningState;

namespace CVScreeningCore.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Screening:IEntity
    {
        #region IEntity interface method definition

        public void SetId(int id)
        {
            ScreeningId = id;
        }

        public int GetId()
        {
            return ScreeningId;
        }

        public void SetTenantId(byte id)
        {
            ScreeningTenantId = id;
        }

        public byte GetTenantId()
        {
            return ScreeningTenantId;
        }

        /// <summary>
        /// Init the state of screening
        /// </summary>
        public void InitializeEntity()
        {
        }

        #endregion

        #region Permission

        /// <summary>
        /// Add permission for this screening
        /// </summary>
        /// <param name="userProfile"></param>
        /// <param name="permissionName"></param>
        private void GrantPermission(webpages_UserProfile userProfile, string permissionName)
        {
            if (!this.Permission.Any(p => p.Screening == this && p.UserProfile == userProfile
                                          && p.PermissionName == permissionName && p.PermissionIsGranted == true))
            {
                this.Permission.Add(new Permission
                {
                    Screening = this,
                    UserProfile = userProfile,
                    PermissionName = permissionName,
                    PermissionIsGranted = true
                });                
            }
        }

        /// <summary>
        /// Revoke permission for this screening
        /// </summary>
        /// <param name="userProfile"></param>
        /// <param name="permissionName"></param>
        private void RevokePermission(webpages_UserProfile userProfile, string permissionName)
        {
            this.Permission.Reverse().Where(p => p.Screening == this && p.UserProfile == userProfile
                && p.PermissionName == permissionName).ToList().ForEach(z => this.Permission.Remove(z));
        }

        /// <summary>
        /// Setup screening manage permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void GrantScreeningManagePermission(webpages_UserProfile userProfile)
        {
            GrantPermission(userProfile, Models.Permission.kScreeningManagePermission);
        }

        /// <summary>
        /// Revoke screening manage permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void RevokeScreeningManagePermission(webpages_UserProfile userProfile)
        {
            RevokePermission(userProfile, Models.Permission.kScreeningManagePermission);
        }

        /// <summary>
        /// Setup screening view permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void GrantScreeningViewPermission(webpages_UserProfile userProfile)
        {
            GrantPermission(userProfile, Models.Permission.kScreeningViewPermission);
        }

        /// <summary>
        /// Revoke screening view permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void RevokeScreeningViewPermission(webpages_UserProfile userProfile)
        {
            RevokePermission(userProfile, Models.Permission.kScreeningViewPermission);
        }

        /// <summary>
        /// Setup quality control permission for this screening
        /// </summary>
        /// <param name="userProfile"></param>
        private void GrantPermissionForQualityControl(
            webpages_UserProfile userProfile)
        {
            // Setup screening permission
            new List<string>
            {
                Models.Permission.kScreeningManagePermission, 
                Models.Permission.kScreeningViewPermission,
                Models.Permission.kReportUploadPermission,
            }.ForEach(p => GrantPermission(userProfile, p));

            // Setup screening discussion permission
            if (GetInternalScreeningDiscussion() != null)
                GetInternalScreeningDiscussion().GrantInternalScreeningManageDiscussionPermission(userProfile);

            // Setup atomic check permission. Permission for QC are granted in InitAtomicCheck
            this.AtomicCheck.ToList().ForEach(a => a.GrantPermissionForQualityControlOrAccountManager(userProfile));
           
            // Setup report permission
            this.ScreeningReport.ToList().ForEach(r => r.GrantPermissionForQualityControl(userProfile));
        }


        /// <summary>
        /// Setup quality control permission for this screening
        /// </summary>
        /// <param name="userProfile"></param>
        private void RevokePermissionForQualityControl(
            webpages_UserProfile userProfile)
        {
            // Clear all the permission linked to the previous QC for this screening
            // Setup screening permission
            new List<string>
            {
                Models.Permission.kScreeningManagePermission,
                Models.Permission.kScreeningViewPermission,
                Models.Permission.kReportUploadPermission,
            }.ForEach(l => RevokePermission(userProfile, l));

            // Remove screening internal discussion permission
            if (GetInternalScreeningDiscussion() != null)
                GetInternalScreeningDiscussion().RevokeInternalScreeningManageDiscussionPermission(userProfile);

            // Setup atomic check permission
            this.AtomicCheck.ToList().ForEach(a => a.RevokePermissionForQualityControlOrAccountManager(userProfile));

            // Setup report permission
            this.ScreeningReport.ToList().ForEach(r => r.RevokePermissionForQualityControl(userProfile));
        }

        /// <summary>
        /// Setup for this screening for all the account manager
        /// </summary>
        public void GrantPermissionForAccountManagers()
        {
            this.GetAccountManagers().ToList().ForEach(a => GrantPermissionForAccountManager(a));
        }

        /// <summary>
        /// Setup for this screening for all the account manager
        /// </summary>
        public void GrantPermissionForClients()
        {
            this.GetClients().ToList().ForEach(a => GrantPermissionForClient(a));
        }

        /// <summary>
        /// Setup client permission for this screening
        /// </summary>
        /// <param name="userProfile"></param>
        public void GrantPermissionForClient(webpages_UserProfile userProfile)
        {
            this.GrantScreeningManagePermission(userProfile);
            this.GrantScreeningViewPermission(userProfile);
            foreach (var report in this.ScreeningReport.Where(u => u.ScreeningReportVersion > 0))
            {
                report.GrantReportViewPermission(userProfile);
            }
            if (this.GetExternalScreeningDiscussion() != null)
                this.GetExternalScreeningDiscussion().GrantExternalScreeningManageDiscussionPermission(userProfile);
        }

        /// <summary>
        /// Revoke client permission for this screening
        /// </summary>
        /// <param name="userProfile"></param>
        public void RevokePermissionForClient(webpages_UserProfile userProfile)
        {
            this.RevokeScreeningManagePermission(userProfile);
            this.RevokeScreeningViewPermission(userProfile);
            foreach (var report in this.ScreeningReport.Where(u => u.ScreeningReportVersion > 0))
            {
                report.RevokeReportViewPermission(userProfile);
            }
            if (this.GetExternalScreeningDiscussion() != null)
                this.GetExternalScreeningDiscussion().RevokeExternalScreeningManageDiscussionPermission(userProfile);
        }


        /// <summary>
        /// Setup am permission for this screening
        /// </summary>
        /// <param name="userProfile"></param>
        public void GrantPermissionForAccountManager(webpages_UserProfile userProfile)
        {
            this.GrantScreeningManagePermission(userProfile);
            this.GrantScreeningViewPermission(userProfile);

            foreach (var atomicCheck in this.AtomicCheck)
            {
                atomicCheck.GrantPermissionForQualityControlOrAccountManager(userProfile);
            }

            foreach (var report in this.ScreeningReport.Where(u => u.ScreeningReportVersion > 0))
            {
                report.GrantReportViewPermission(userProfile);
            }
            if (this.GetExternalScreeningDiscussion() != null)
                this.GetExternalScreeningDiscussion().GrantExternalScreeningManageDiscussionPermission(userProfile);
            if (this.GetInternalScreeningDiscussion() != null)
                this.GetInternalScreeningDiscussion().GrantInternalScreeningManageDiscussionPermission(userProfile);
        }

        /// <summary>
        /// Revoke am permission for this screening
        /// </summary>
        /// <param name="userProfile"></param>
        public void RevokePermissionForAccountManager(webpages_UserProfile userProfile)
        {
            this.RevokeScreeningManagePermission(userProfile);
            this.RevokeScreeningViewPermission(userProfile);

            foreach (var atomicCheck in this.AtomicCheck)
            {
                atomicCheck.RevokePermissionForQualityControlOrAccountManager(userProfile);
            }

            foreach (var report in this.ScreeningReport.Where(u => u.ScreeningReportVersion > 0))
            {
                report.RevokeReportViewPermission(userProfile);
            }
            if (this.GetExternalScreeningDiscussion() != null)
                this.GetExternalScreeningDiscussion().RevokeExternalScreeningManageDiscussionPermission(userProfile);
            if (this.GetInternalScreeningDiscussion() != null)
                this.GetInternalScreeningDiscussion().RevokeInternalScreeningManageDiscussionPermission(userProfile);
        }

        
        /// <summary>
        /// Setup quality control permission for this screening
        /// </summary>
        /// <param name="userProfile"></param>
        private void GrantPermissionForScreener(
            webpages_UserProfile userProfile)
        {
            // Setup screening permission
            new List<string>
            {
                Models.Permission.kScreeningViewPermission,
            }.ForEach(p => GrantPermission(userProfile, p));
        }


        /// <summary>
        /// Setup quality control permission for this screening
        /// </summary>
        /// <param name="userProfile"></param>
        private void RevokePermissionForScreener(
            webpages_UserProfile userProfile)
        {
            if (!userProfile.AtomicCheck.Any())
            {
                // If screener has no more atomic check assigned to him, we remove his permission on this screening
                new List<string>
                {
                    Models.Permission.kScreeningViewPermission,
                }.ForEach(l => RevokePermission(userProfile, l));   
            }
        }




        #endregion

        #region Screening state

        /// <summary>
        /// Screening state
        /// </summary>
        private ScreeningState.ScreeningState _state;

        /// <summary>
        /// Screening state properties
        /// </summary>
        public ScreeningState.ScreeningState State
        {
            get
            {
                if (_state == null)
                    _state = new ScreeningStateFactory().Get(this, (ScreeningStateType)ScreeningState);
                return _state;
            }
            set
            {
                // Status is updated
                if (_state.GetType() == value.GetType())
                    return;

                var oldValue = _state;
                _state = value;
                this.StatusHasBeenUpdated(oldValue, value);
            }
        }

        /// <summary>
        /// Setter for screening state.
        /// </summary>
        /// <returns></returns>
        public void setState(ScreeningStateType stateType)
        {
            State = new ScreeningStateFactory().Get(this, stateType);
        }

        /// <summary>
        /// Trigger called when atomic check status has been updated
        /// </summary>
        private void StatusHasBeenUpdated(
            ScreeningState.ScreeningState oldStatus, ScreeningState.ScreeningState newStatus)
        {
            this.History.Add(new History
            {
                HistoryAction = CVScreeningCore.Models.History.kScreeningStatusUpdateAction,
                HistoryCreatedDate = DateTime.Now,
                HistoryScreeningOldStatus = (Byte)oldStatus.GetCode(),
                HistoryScreeningNewStatus = (Byte)newStatus.GetCode(),
                Screening = this
            });
        }

        /// <summary>
        /// Create history item when screening is created
        /// </summary>
        public void InsertHistoryWhenScreeningCreated()
        {
            this.History.Add(new History
            {
                HistoryAction = CVScreeningCore.Models.History.kScreeningCreationAction,
                HistoryCreatedDate = DateTime.Now,
                HistoryScreeningNewStatus = (Byte)ScreeningStateType.NEW,
                Screening = this
            });
        }


        #endregion

        #region Screening atomic check initialization and setter

        /// <summary>
        /// Initialize screening and create void atomic checks
        /// </summary>
        public void InitScreeningAtomicChecks()
        {
            IEnumerable<TypeOfCheckScreeningLevelVersion> typeOfChecks = this.GetTypeOfChecks();
            foreach (var typeOfCheckScreeningLevelVersion in typeOfChecks)
            {
                var typeOfCheck = typeOfCheckScreeningLevelVersion.TypeOfCheck;

                // 2 atomic checks needs to be creation for education check (one for high school and one for university)
                if (typeOfCheckScreeningLevelVersion.IsEducationTypeOfCheck())
                {
                    this.AtomicCheck.Add(InitAtomicCheck(
                        typeOfCheckScreeningLevelVersion,
                        CVScreeningCore.Models.AtomicCheck.kHighSchoolType)
                        );
                    this.AtomicCheck.Add(InitAtomicCheck(
                        typeOfCheckScreeningLevelVersion,
                        CVScreeningCore.Models.AtomicCheck.kFacultyType)
                        );
                    continue;
                }

                // 2 atomic checks needs to be creation for education check (one for high school and one for university)
                if (typeOfCheckScreeningLevelVersion.IsEmploymentTypeOfCheck())
                {
                    this.AtomicCheck.Add(InitAtomicCheck(
                        typeOfCheckScreeningLevelVersion,
                        CVScreeningCore.Models.AtomicCheck.kCurrentCompanyType)
                        );
                    this.AtomicCheck.Add(InitAtomicCheck(
                        typeOfCheckScreeningLevelVersion,
                        CVScreeningCore.Models.AtomicCheck.kOtherCompanyType)
                        );
                    continue;
                }


                // 3 atomic checks needs to be for contact number checks (home phone, mobile phone and emergency phone number
                if (typeOfCheckScreeningLevelVersion.IsContactNumberTypeOfCheck())
                {
                    this.AtomicCheck.Add(InitAtomicCheck(
                        typeOfCheckScreeningLevelVersion,
                        CVScreeningCore.Models.AtomicCheck.kHomePhoneNumberType)
                    );
                    this.AtomicCheck.Add(InitAtomicCheck(
                        typeOfCheckScreeningLevelVersion,
                        CVScreeningCore.Models.AtomicCheck.kMobilePhoneNumberType)
                        );
                    this.AtomicCheck.Add(InitAtomicCheck(
                        typeOfCheckScreeningLevelVersion,
                        CVScreeningCore.Models.AtomicCheck.kEmergencyContactType)
                        );
                    continue;
                }
                // 3 atomic checks needs to be created for neightborhood check (CV, ID card and current address)
                if (typeOfCheckScreeningLevelVersion.IsNeighborhoodTypeOfCheck())
                {
                    this.AtomicCheck.Add(InitAtomicCheck(
                        typeOfCheckScreeningLevelVersion,
                        CVScreeningCore.Models.AtomicCheck.kIDCardAddressType)
                        );
                    this.AtomicCheck.Add(InitAtomicCheck(
                        typeOfCheckScreeningLevelVersion,
                        CVScreeningCore.Models.AtomicCheck.kCVAddressType)
                        );
                    this.AtomicCheck.Add(InitAtomicCheck(
                        typeOfCheckScreeningLevelVersion,
                        CVScreeningCore.Models.AtomicCheck.kCurrentAddressType)
                        );
                    continue;
                }
                // Standard atomic check, only one creation
                this.AtomicCheck.Add(InitAtomicCheck(
                    typeOfCheckScreeningLevelVersion));
            }
        }

        /// <summary>
        /// Initialize an atomic check during screening creation. Atomic check does not contain any qualification
        /// </summary>
        /// <param name="typeOfCheckScreeningLevelVersion">Type of check linked to this atomic check</param>
        /// <param name="atomicCheckType">Category of the atomic checl: OFFICE or ON FIELD</param>
        /// <param name="qualificationPlace"></param>
        /// <returns></returns>
        private AtomicCheck InitAtomicCheck(
            TypeOfCheckScreeningLevelVersion typeOfCheckScreeningLevelVersion,
            string atomicCheckType = null,
            QualificationPlace qualificationPlace = null
            )
        {
            var atomicCheck = new AtomicCheck
            {
                AtomicCheckCategory = typeOfCheckScreeningLevelVersion.TypeOfCheck.GetFirstInvestigationPlace(),
                AtomicCheckType = atomicCheckType,
                TypeOfCheckScreeningLevelVersion = typeOfCheckScreeningLevelVersion,
                AtomicCheckDeactivated = false,
                QualificationPlace = qualificationPlace,
                AtomicCheckState = (Byte)AtomicCheckState.AtomicCheckStateType.NEW,
                AtomicCheckValidationState = (Byte)AtomicCheckValidationState.AtomicCheckValidationStateType.NOT_PROCESSED
            };

            atomicCheck.Screening = this;
            atomicCheck.InitAtomicCheckDiscussions();               // Create atomic check discussion board
            atomicCheck.InsertHistoryWhenAtomicCheckCreated();      // Insert history item

            //Grant permission to quality control and account manager and client
            atomicCheck.GrantPermissionForQualityControlOrAccountManager(this.QualityControl);
            atomicCheck.Screening.GetAccountManagers().ToList().ForEach(
                a => atomicCheck.GrantPermissionForQualityControlOrAccountManager(a));
            return atomicCheck;
        }


        public void RequalificationCompleted(QualificationPlace qualificationPlace)
        {
            // Type of check linked to this qualification place for this screening
            var allTypeOfChecksCompatible = qualificationPlace.GetTypeOfChecksCompatible();
            var typeOfChecksCompatible = ScreeningLevelVersion.TypeOfCheckScreeningLevelVersion.Single(
                    u => allTypeOfChecksCompatible.Contains((TypeOfCheckEnum)u.TypeOfCheck.TypeOfCheckCode));
            
            var atomicCheckRequalified = this.AtomicCheck.Where(u => u.QualificationPlace == qualificationPlace &&
                u.QualificationPlace != null && u.IsWronglyQualified());

            foreach (var atomicCheck in atomicCheckRequalified.Reverse())
            {
                string atomicCheckType = null;
                if (typeOfChecksCompatible.IsEducationTypeOfCheck())
                {
                    atomicCheckType =
                        qualificationPlace.GetType() == typeof (HighSchool) ||
                        qualificationPlace.GetType().BaseType == typeof (HighSchool)
                            ? Models.AtomicCheck.kHighSchoolType
                            : Models.AtomicCheck.kFacultyType;
                }

                if (typeOfChecksCompatible.IsEmploymentTypeOfCheck())
                {
                    atomicCheckType = qualificationPlace.IsCurrentCompanyForScreening(this)
                        ? Models.AtomicCheck.kCurrentCompanyType
                        : Models.AtomicCheck.kOtherCompanyType;
                }

                // If it exists any other atomic checks with the same type of check, wrongly qualified atomic check is removed
                if (this.AtomicCheck.Any(u => typeOfChecksCompatible.TypeOfCheck.TypeOfCheckCode ==
                                              u.TypeOfCheckScreeningLevelVersion.TypeOfCheck.TypeOfCheckCode &&
                                              !u.IsWronglyQualified() && !u.State.IsDisabled() && u.AtomicCheckType == atomicCheckType))
                {
                    atomicCheck.DisabledAtomicCheck();
                }
                // If it does not exists any other atomic check with the same type of check, wrongly atomic is resetted
                else
                {
                    atomicCheck.ResetAtomicCheck();
                }
            }
            this.QualificationPlace.Remove(qualificationPlace);
        }


        /// <summary>
        /// Set atomic check form qualification place. The method will whether the atomic has already been created
        /// but have empty qualification place. If yes, qualification place is set, else a new atomic check is created
        /// </summary>
        /// <param name="qualificationPlace"></param>
        public AtomicCheck SetAtomicCheck(QualificationPlace qualificationPlace)
        {
            string atomicCheckType = null;

            // Type of check linked to this qualification place for this screening
            var allTypeOfChecksCompatible = qualificationPlace.GetTypeOfChecksCompatible();

            // Qualification place not compatible with this screening
            if (!ScreeningLevelVersion.TypeOfCheckScreeningLevelVersion.Any(
                u => allTypeOfChecksCompatible.Contains((TypeOfCheckEnum)u.TypeOfCheck.TypeOfCheckCode)))
            {
                throw new ExceptionQualificationNotCompatible();
            }

            var typeOfChecksCompatible = ScreeningLevelVersion.TypeOfCheckScreeningLevelVersion.Single(
                u => allTypeOfChecksCompatible.Contains((TypeOfCheckEnum)u.TypeOfCheck.TypeOfCheckCode));


            // It exists 2 employment atomic check minimum (current company and other company). Atomic check type is used to make 
            // the difference
            if (typeOfChecksCompatible.IsEmploymentTypeOfCheck())
            {
                atomicCheckType = qualificationPlace.IsCurrentCompanyForScreening(this) ? Models.AtomicCheck.kCurrentCompanyType : Models.AtomicCheck.kOtherCompanyType;
                
                bool isQualificationExist =
                    this.AtomicCheck.Any(u => typeOfChecksCompatible.TypeOfCheck.TypeOfCheckCode ==
                              u.TypeOfCheckScreeningLevelVersion.TypeOfCheck.TypeOfCheckCode &&
                              u.QualificationPlace != null && u.AtomicCheckType == atomicCheckType);

                // Atomic check has already the qualification place set, a new atomic check is created
                if (isQualificationExist)
                {
                    AtomicCheck emplymentAtomicCheck = InitAtomicCheck(
                        typeOfChecksCompatible,
                            atomicCheckType,
                        qualificationPlace);
                    this.AtomicCheck.Add(emplymentAtomicCheck);
                    return emplymentAtomicCheck;
                }
            }


            // Specific cases for education type checks as they contains high school and faculty checks
            // If atomic check of type high school or faculty already exist, add it direcly
            if (typeOfChecksCompatible.IsEducationTypeOfCheck())
            {
                atomicCheckType =
                    qualificationPlace.GetType() == typeof(HighSchool) ||
                    qualificationPlace.GetType().BaseType == typeof(HighSchool)
                        ? Models.AtomicCheck.kHighSchoolType
                        : Models.AtomicCheck.kFacultyType;

                var educationType =
                    qualificationPlace.GetType() == typeof(HighSchool) ||
                    qualificationPlace.GetType().BaseType == typeof(HighSchool)
                        ? typeof(HighSchool)
                        : typeof(Faculty);

                bool isQualificationExist =
                    this.AtomicCheck.Any(u => typeOfChecksCompatible.TypeOfCheck.TypeOfCheckCode ==
                                              u.TypeOfCheckScreeningLevelVersion.TypeOfCheck.TypeOfCheckCode &&
                                              u.QualificationPlace != null &&
                                              (u.QualificationPlace.GetType().BaseType == educationType));

                // Atomic check has already the qualification place set, a new atomic check is created
                if (isQualificationExist)
                {
                    AtomicCheck educationAtomicCheck = InitAtomicCheck(
                        typeOfChecksCompatible,
                            atomicCheckType,
                        qualificationPlace);
                    this.AtomicCheck.Add(educationAtomicCheck);
                    return educationAtomicCheck;
                }
            }





            // Get the first atomic check that is not yet filled. In case of 2 atomic checks (education high school and faculties)
            // the first one that is not filled is set
            AtomicCheck atomicCheck = null;
            if (this.AtomicCheck.Any(u => typeOfChecksCompatible.TypeOfCheck.TypeOfCheckCode ==
                u.TypeOfCheckScreeningLevelVersion.TypeOfCheck.TypeOfCheckCode
                && u.QualificationPlace == null && u.AtomicCheckType == atomicCheckType && !u.State.IsDisabled()))
            {
                atomicCheck = this.AtomicCheck.First(u => typeOfChecksCompatible.TypeOfCheck.TypeOfCheckCode ==
                        u.TypeOfCheckScreeningLevelVersion.TypeOfCheck.TypeOfCheckCode && u.QualificationPlace == null
                        && u.AtomicCheckType == atomicCheckType && !u.State.IsDisabled());
            }


            // Atomic check not filled found
            if (atomicCheck != null)
            {
                atomicCheck.QualificationPlace = qualificationPlace;
                return atomicCheck;
            }

            // Atomic check not found, => creation needed and linked it to this qualification place
            atomicCheck = InitAtomicCheck(
                typeOfChecksCompatible,
                null,
                qualificationPlace);
            this.AtomicCheck.Add(atomicCheck);
            return atomicCheck;

        }

        #endregion

        #region Method related to neighbourhood atomic check

        /// <summary>
        /// Returns true whether the screening has a neighbourhood check
        /// </summary>
        /// <returns></returns>
        public bool HasNeighbourhoodCheck()
        {
            return this.ScreeningLevelVersion.TypeOfCheckScreeningLevelVersion.Any(
                u => u.IsNeighborhoodTypeOfCheck());
        }

        /// <summary>
        /// Get the atomic check if any that is related to current address check
        /// </summary>
        /// <returns></returns>
        public AtomicCheck GetCurrentAddressAtomicCheck()
        {
            if (!HasNeighbourhoodCheck())
                return null;

            return this.AtomicCheck.Single(u => u.IsNeighborhoodCurrentAddress());
        }

        /// <summary>
        // Atomic check that are neighbourhood with type current address that is wrongly qualified 
        // Reset is done when atomic check has been requalify completely
        /// </summary>
        public void CurrentAddressHasBeenRequalified()
        {
            if (this.HasNeighbourhoodCheck())
            {
                var atomicCheckCurrentAddress = this.GetCurrentAddressAtomicCheck();
                if (atomicCheckCurrentAddress != null && atomicCheckCurrentAddress.IsWronglyQualified()
                    && this.ScreeningQualification.CurrentAddress.IsSet())
                {
                    atomicCheckCurrentAddress.State.ToNew();
                }
            }
        }

        /// <summary>
        // Atomic check that are neighbourhood with type CV address that is wrongly qualified 
        // Reset is done when atomic check has been requalify completely
        /// </summary>
        public void CVAddressHasBeenRequalified()
        {
            if (this.HasNeighbourhoodCheck())
            {
                var atomicCheckCVAddress = this.GetCVAddressAtomicCheck();
                if (atomicCheckCVAddress != null && atomicCheckCVAddress.IsWronglyQualified()
                    && this.ScreeningQualification.CVAddress.IsSet())
                {
                    atomicCheckCVAddress.State.ToNew();
                }
            }
        }

        /// <summary>
        // Atomic check that are neighbourhood with type ID Card address that is wrongly qualified 
        // Reset is done when atomic check has been requalify completely
        /// </summary>
        public void IDCardAddressHasBeenRequalified()
        {
            if (this.HasNeighbourhoodCheck())
            {
                var atomicCheckIDCardAddress = this.GetIDCardAddressAtomicCheck();
                if (atomicCheckIDCardAddress != null && atomicCheckIDCardAddress.IsWronglyQualified()
                    && this.ScreeningQualification.IDCardAddress.IsSet())
                {
                    atomicCheckIDCardAddress.State.ToNew();
                }
            }
        }

        /// <summary>
        /// Get the atomic check if any that is related to CV address check
        /// </summary>
        /// <returns></returns>
        public AtomicCheck GetCVAddressAtomicCheck()
        {
            if (!HasNeighbourhoodCheck())
                return null;

            return this.AtomicCheck.Single(u => u.IsNeighborhoodCVAddress());
        }

        /// <summary>
        /// Get the atomic check if any that is related to id card address check
        /// </summary>
        /// <returns></returns>
        public AtomicCheck GetIDCardAddressAtomicCheck()
        {
            if (!HasNeighbourhoodCheck())
                return null;

            return this.AtomicCheck.Single(u => u.IsNeighborhoodIDCardAddress());
        }

        #endregion

        #region Getter atomic checks

        /// <summary>
        /// Retrieve screening atomic check by type of check
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetAtomicChecks()
        {
            return this.AtomicCheck.ToList();
        }

        /// <summary>
        /// Retrieve screening atomic check that are not yet assigned
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetNewAtomicChecks()
        {
            return this.AtomicCheck.Where(u => u.IsNew()).ToList();
        }

        /// <summary>
        /// Retrieve screening atomic check that are deactivated
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetDeactivatedAtomicChecks()
        {
            return this.AtomicCheck.Where(u => u.IsDeactivated()).ToList();
        }

        /// <summary>
        /// Retrieve screening atomic check by type of check
        /// </summary>
        /// <returns>Dictionnary with key is type of check and value list of atomic checks</returns>
        public IEnumerable<AtomicCheck> GetAtomicChecksNeedingQualificationPlace()
        {
            if (this.AtomicCheck == null)
                return null;

            return this.AtomicCheck.Where(u => u.TypeOfCheckScreeningLevelVersion.TypeOfCheck.IsQualificationNeeded() == true).ToList();

        }

        /// <summary>
        /// Retrieve screening atomic check that are not applicable
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetNotApplicableAtomicChecks()
        {
            return this.AtomicCheck.Where(u => u.IsNotApplicable()).ToList();
        }

        /// <summary>
        /// Retrieve screening atomic check that are not yet qualified
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetNotYetQualifiedAtomicChecks()
        {
            return this.AtomicCheck.Where(u => !u.IsQualified() && !u.IsDisabled()).ToList();
        }

        /// <summary>
        /// Retrieve screening atomic check that are qualified
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetQualifiedAtomicChecks()
        {
            return this.AtomicCheck.Where(u => u.IsQualified()).ToList();
        }

        /// <summary>
        /// Retrieve screening atomic check that are wrongly qualified
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetWronflyQualifiedAtomicChecks()
        {
            return this.AtomicCheck.Where(u => u.IsWronglyQualified()).ToList();
        }

        /// <summary>
        /// Return true whether there are at least one atomic check wrongly qualified
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public bool HasWronflyQualifiedAtomicChecks()
        {
            return this.AtomicCheck.Any(u => u.IsWronglyQualified());
        }

        /// <summary>
        /// Retrieve screening atomic check that are on going and have not been yet validated or 
        /// rejected by QC and/or AM
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetNotProcessedAtomicChecks()
        {
            return this.AtomicCheck.Where(u => u.IsNotProcessed()).ToList();
        }

        /// <summary>
        /// Retrieve screening atomic check that are on going and pending confirmation
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetPendingConfirmationAtomicChecks()
        {
            return this.AtomicCheck.Where(u => u.IsPendingConfirmation()).ToList();
        }

        /// <summary>
        /// Retrieve screening atomic check that are pending validation from qc
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetProcessedAtomicChecks()
        {
            return this.AtomicCheck.Where(u => u.IsProcessed()).ToList();
        }

        /// <summary>
        /// Retrieve screening atomic check that have been validated from qc
        /// Atomic not applicable are considered as validated
        /// rejected by QC and/or AM
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetValidatedAtomicChecks()
        {
            return this.AtomicCheck.Where(u => u.IsValidated()).ToList();
        }

        /// <summary>
        /// Retrieve screening atomic checks that have been rejected by QC or AM
        /// </summary>
        /// <returns>List of atomic checks</returns>
        public IList<AtomicCheck> GetRejectedAtomicChecks()
        {
            return this.AtomicCheck.Where(u => u.IsRejected()).ToList();
        }

        #endregion

        #region Screening status

        /// <summary>
        /// Check whether screening status is new or not
        /// </summary>
        /// <returns></returns>
        public bool IsNew()
        {
            return State.IsNew();
        }

        /// <summary>
        /// Check whether screening status is deactivated or not
        /// </summary>
        /// <returns></returns>
        public bool IsDeactivated()
        {
            return State.IsDeactivated();
        }

        /// <summary>
        /// Check whether screening status is open or not
        /// </summary>
        /// <returns></returns>
        public bool IsOpen()
        {
            return State.IsOpen();
        }

        /// <summary>
        /// Check whether screening status is submitted or not
        /// </summary>
        /// <returns></returns>
        public bool IsSubmitted()
        {
            return State.IsSubmitted();
        }

        /// <summary>
        /// Check whether the screening has already been submitted to the client or not
        /// </summary>
        /// <returns></returns>
        public bool HasAlreadyBeenSubmitted()
        {
            return this.ScreeningReport.Any();
        }

        /// <summary>
        /// Check whether screening status is validated or not
        /// </summary>
        /// <returns></returns>
        public bool IsValidated()
        {
            return State.IsValidated();
        }

        /// <summary>
        /// Check whether screening status has been submitted and is currently updating
        /// </summary>
        /// <returns></returns>
        public bool IsUpdating()
        {
            return State.IsUpdating();
        }

        /// <summary>
        /// Returns true whether screening qualification has been started or not
        /// </summary>
        /// <returns></returns>
        public bool IsQualificationStarted()
        {
            // As birth place is a mandatory field that is present automatially in all screening
            // We can consider that qualification of a screening is started if this field is set
            return this.ScreeningQualification != null 
                && !String.IsNullOrEmpty(this.ScreeningQualification.ScreeningQualificationBirthPlace);
        }



        /// <summary>
        /// Returns true whether screening qualification is over ot not
        /// </summary>
        /// <returns></returns>
        public bool IsQualificationCompleted()
        {
            return this.GetNotYetQualifiedAtomicChecks().Count == 0;
        }

        /// <summary>
        /// Return whether all the atomic checks of the screening are in the status new or not
        /// </summary>
        /// <returns></returns>
        public bool AreAllAtomicChecksNew()
        {
            return this.GetAtomicChecks().Count == this.GetNewAtomicChecks().Count;
        }

        /// <summary>
        /// Return true whether all the atomic checks of the screening have been validated or not
        /// </summary>
        /// <returns></returns>
        public bool AreAllAtomicChecksValidated()
        {
            return this.GetAtomicChecks().Count == this.GetValidatedAtomicChecks().Count;
        }

        /// <summary>
        /// Return true whether all the atomic checks of the screening have been deactivated or not
        /// </summary>
        /// <returns></returns>
        public bool AreAllAtomicChecksDeactivated()
        {
            var all = this.GetAtomicChecks();
            var deac = this.GetDeactivatedAtomicChecks();
            return this.GetAtomicChecks().Count == this.GetDeactivatedAtomicChecks().Count;
        }

        /// <summary>
        /// Return true whether any of the atomic checks has been rejected or not
        /// </summary>
        /// <returns></returns>
        private bool AnyAtomicChecksRejected()
        {
            return GetRejectedAtomicChecks().Count != 0;
        }

        /// <summary>
        /// Compute screening state 
        /// </summary>
        public void ComputeScreeningState()
        {
            // Screening deactivated cannot be reactivated by code. Action should be done manually in database
            if (this.IsDeactivated() || this.AreAllAtomicChecksDeactivated())
                return;

            // Screening updating cannot be updated. Status will be update only during next report submition
            if (this.IsUpdating())
                return;

            // STATE = UPDATING => if screener has already been submitted at least one atomic check has been rejected
            // or if a new qualification has been created after submission
            if (this.IsSubmitted())
            {
                if (AnyAtomicChecksRejected() || !this.AreAllAtomicChecksValidated()) 
                    this.State.ToUpdating();
                return;
            }

            // Status = NEW => if all the atomic checks are in status NEW and qualification has not been started yet
            if (AreAllAtomicChecksNew() && !this.IsQualificationStarted())
            {
                if (!this.IsNew()) 
                    this.State.ToNew();
                return;
            }

            // STATE = OPEN => if qualification has been started and not all the atomic checks has been validated
            if (this.IsQualificationStarted() && !this.AreAllAtomicChecksValidated())
            {
                if (this.HasAlreadyBeenSubmitted())
                {
                    if (!this.IsUpdating()) 
                        this.State.ToUpdating();
                }
                else
                {
                    if (!this.IsOpen()) 
                        this.State.ToOpen();
                }
                return;
            }

            // STATE = VALIDATED => All the atomic check are validated and the screening have not been yet already submitted
            if (!this.IsSubmitted() && this.AreAllAtomicChecksValidated())
            {
                if (!this.IsValidated()) 
                    this.State.ToValidated();
                return;
            }


        }

        #endregion

        #region Screening report method

        /// <summary>
        /// Returns next screening report version available
        /// </summary>
        /// <returns></returns>
        public int GetNextScreeningReportVersion()
        {
            int? version = this.ScreeningReport.Max(u => u.ScreeningReportVersion);
            return version != null ? (int)version + 1: 1;
        }

        /// <summary>
        /// Submit a screening report to the client
        /// </summary>
        public void SubmitScreeningReport(ScreeningReport screeningReport)
        {
            if (screeningReport == null)
                throw new NullReferenceException();

            screeningReport.ScreeningReportVersion = this.GetNextScreeningReportVersion();

            // Update screening status to submitted
            if (!this.IsSubmitted())
                this.State.ToSubmitted();
        }

        #endregion

        #region Screening discussion method

        /// <summary>
        /// Create discussion needed when a screening is created
        /// </summary>
        public void InitScreeningDiscussions()
        {
            CreateExternalScreeningDiscussion();
            CreateInternalScreeningDiscussion();
        }

        /// <summary>
        /// Create default screening discussion that is used between AM and Client
        /// </summary>
        private void CreateExternalScreeningDiscussion()
        {
            this.Discussion.Add(new Discussion
            {
                DiscussionTitle = string.Format("Discussion about screening {0} - {1}", this.ScreeningReference, this.ScreeningFullName),
                DiscussionType = CVScreeningCore.Models.Discussion.kExternalScreeningType,
                DiscussionCreatedDate = DateTime.Now,
                Screening = this
            });
        }

        /// <summary>
        /// Create internal screening discussion that is used between AM, QC and Qualifier
        /// </summary>
        private void CreateInternalScreeningDiscussion()
        {
            this.Discussion.Add(new Discussion
            {
                DiscussionTitle = string.Format("Internal discussion about screening {0} - {1}", this.ScreeningReference, this.ScreeningFullName),
                DiscussionType = CVScreeningCore.Models.Discussion.kInternalScreeningType,
                DiscussionCreatedDate = DateTime.Now,
                Screening = this
            });
        }

        /// <summary>
        /// Retrieve screening internal discussion
        /// </summary>
        /// <returns></returns>
        public Discussion GetInternalScreeningDiscussion()
        {
            if (this.Discussion.Any(u => u.DiscussionType == CVScreeningCore.Models.Discussion.kInternalScreeningType))
                return this.Discussion.First(u => u.DiscussionType == CVScreeningCore.Models.Discussion.kInternalScreeningType);
            return null;
        }

        /// <summary>
        /// Retrieve external screening discussion
        /// </summary>
        /// <returns></returns>
        public Discussion GetExternalScreeningDiscussion()
        {
            if (this.Discussion.Any(u => u.DiscussionType == CVScreeningCore.Models.Discussion.kExternalScreeningType))
                return this.Discussion.First(u => u.DiscussionType == CVScreeningCore.Models.Discussion.kExternalScreeningType);
            return null;
        }

        #endregion

        /// <summary>
        /// Assign quality control to a screener
        /// </summary>
        /// <param name="userProfile"></param>
        public void AssignQualityControl(webpages_UserProfile userProfile)
        {
            // Screening already created and assign to quality control. Retrieve already set permission and reset them
            if (this.ScreeningId != 0 && this.QualityControl != null)
            {
                // Clear all the permission linked to the previous QC for this screening
                this.RevokePermissionForQualityControl(this.QualityControl);
            }
            this.GrantPermissionForQualityControl(userProfile);
            this.QualityControl = userProfile;

        }

        /// <summary>
        /// Retrieve list of account manager
        /// </summary>
        /// <returns></returns>
        public ICollection<webpages_UserProfile> GetAccountManagers()
        {
            return this.ScreeningLevelVersion.ScreeningLevel.Contract.ClientCompany.AccountManagers;
        }

        /// <summary>
        /// Retrieve quality control
        /// </summary>
        /// <returns></returns>
        public webpages_UserProfile GetQualityControl()
        {
            return this.QualityControl;
        }

        /// <summary>
        /// Retrieve list of client 
        /// </summary>
        /// <returns></returns>
        public ICollection<webpages_UserProfile> GetClients()
        {
            return this.ScreeningLevelVersion.ScreeningLevel.Contract.ClientCompany.ClientUserProfiles;
        }

        /// <summary>
        /// Retrieve screening type of checks
        /// </summary>
        /// <returns></returns>
        public IEnumerable<TypeOfCheckScreeningLevelVersion> GetTypeOfChecks()
        {
            if (this.ScreeningLevelVersion == null)
                return null;

            return this.ScreeningLevelVersion.TypeOfCheckScreeningLevelVersion;
        }
    }
}
