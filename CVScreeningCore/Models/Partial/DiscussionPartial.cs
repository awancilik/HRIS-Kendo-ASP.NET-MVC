//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;

namespace CVScreeningCore.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Discussion:IEntity
    {
        #region IEntity interface method definition

        public void SetId(int id)
        {
            DiscussionId = id;
        }

        public int GetId()
        {
            return DiscussionId;
        }

        public void SetTenantId(byte id)
        {
            DiscussionTenantId = id;
        }

        public byte GetTenantId()
        {
            return DiscussionTenantId;
        }

        public void InitializeEntity()
        {

        }

        #endregion

        #region Permission

        /// <summary>
        /// Add permission for this discussion
        /// </summary>
        /// <param name="userProfile"></param>
        /// <param name="permissionName"></param>
        private void GrantPermission(webpages_UserProfile userProfile, string permissionName)
        {
            if (!this.Permission.Any(p => p.Discussion == this && p.UserProfile == userProfile
                                          && p.PermissionName == permissionName && p.PermissionIsGranted == true))
            {
                this.Permission.Add(new Permission
                {
                    Discussion = this,
                    UserProfile = userProfile,
                    PermissionName = permissionName,
                    PermissionIsGranted = true
                });
            }
        }

        /// <summary>
        /// Clear permission for this discussion
        /// </summary>
        /// <param name="userProfile"></param>
        /// <param name="permissionName"></param>
        private void RevokePermission(webpages_UserProfile userProfile, string permissionName)
        {
            this.Permission.Reverse().Where(p => p.Discussion == this && p.UserProfile == userProfile 
                && p.PermissionName == permissionName).ToList().ForEach(z => this.Permission.Remove(z));
        }


        /// <summary>
        /// Grant external discussion permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void GrantExternalScreeningManageDiscussionPermission(webpages_UserProfile userProfile)
        {
            GrantPermission(userProfile, Models.Permission.kExternalScreeningDiscussionManagePermission);
        }

        /// <summary>
        /// Revoke external discussion permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void RevokeExternalScreeningManageDiscussionPermission(webpages_UserProfile userProfile)
        {
            RevokePermission(userProfile, Models.Permission.kExternalScreeningDiscussionManagePermission);
        }

        /// <summary>
        /// Grant internal screening discussion permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void GrantInternalScreeningManageDiscussionPermission(webpages_UserProfile userProfile)
        {
            GrantPermission(userProfile, Models.Permission.kInternalScreeningDiscussionManagePermission);
        }

        /// <summary>
        /// Revoke internal screening discussion permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void RevokeInternalScreeningManageDiscussionPermission(webpages_UserProfile userProfile)
        {
            RevokePermission(userProfile, Models.Permission.kInternalScreeningDiscussionManagePermission);
        }

        /// <summary>
        /// Grant internal atomic check discussion permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void GrantInternalAtomicCheckManageDiscussionPermission(webpages_UserProfile userProfile)
        {
            GrantPermission(userProfile, Models.Permission.kInternalAtomicCheckDiscussionManagePermission);
        }

        /// <summary>
        /// Revoke internal atomic check  discussion permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void RevokeInternalAtomicCheckManageDiscussionPermission(webpages_UserProfile userProfile)
        {
            RevokePermission(userProfile, Models.Permission.kInternalAtomicCheckDiscussionManagePermission);
        }
        
        #endregion

        #region Constant atomic check

        /// <summary>
        /// Discussion type: external screening
        /// </summary>
        public const string kExternalScreeningType = "EXTERNAL_SCREENING";

        /// <summary>
        /// Discussion type: internal screening
        /// </summary>
        public const string kInternalScreeningType = "INTERNAL_SCREENING";

        /// <summary>
        /// Discussion type: internal atomic check
        /// </summary>
        public const string kInternalAtomicCheckType = "INTERNAL_ATOMIC_CHECK";

        #endregion
    }
}
