//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;

namespace CVScreeningCore.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class ScreeningLevelVersion:IEntity
    {

        public const string kHR = "Allowed to contact HR";
        public const string kNotAllowedContactCurrentCompany = "Not allowed to contact current company";
        public const string kReceptionist = "Allowed to contact receptionist";

        #region IEntity interface method definition

        public void SetId(int id)
        {
            ScreeningLevelVersionId = id;
        }

        public int GetId()
        {
            return ScreeningLevelVersionId;
        }

        public void SetTenantId(byte id)
        {
            ScreeningLevelVersionTenantId = id;
        }

        public byte GetTenantId()
        {
            return ScreeningLevelVersionTenantId;
        }

        public void InitializeEntity()
        {

        }

        #endregion

        #region Permission

        /// <summary>
        /// Add permission for this screening level
        /// </summary>
        /// <param name="userProfile"></param>
        /// <param name="permissionName"></param>
        private void GrantPermission(webpages_UserProfile userProfile, string permissionName)
        {
            if (!this.Permission.Any(p => p.ScreeningLevelVersion == this && p.UserProfile == userProfile
                                          && p.PermissionName == permissionName && p.PermissionIsGranted == true))
            {
                this.Permission.Add(new Permission
                {
                    ScreeningLevelVersion = this,
                    UserProfile = userProfile,
                    PermissionName = permissionName,
                    PermissionIsGranted = true
                });
            }
        }

        /// <summary>
        /// Revoke permission for this screening level
        /// </summary>
        /// <param name="userProfile"></param>
        /// <param name="permissionName"></param>
        private void RevokePermission(webpages_UserProfile userProfile, string permissionName)
        {
            this.Permission.Reverse().Where(p => p.ScreeningLevelVersion == this && p.UserProfile == userProfile
                && p.PermissionName == permissionName).ToList().ForEach(z => this.Permission.Remove(z));
        }

        /// <summary>
        /// Setup screening create permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void GrantScreeningCreatePermission(
            webpages_UserProfile userProfile)
        {
            GrantPermission(userProfile, Models.Permission.kScreeningCreatePermission);
        }

        /// <summary>
        /// Revoke screening create permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void RevokeScreeningCreatePermission(
            webpages_UserProfile userProfile)
        {
            RevokePermission(userProfile, Models.Permission.kScreeningCreatePermission);
        }


        /// <summary>
        /// Setup screening level version view permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void GrantScreeningLevelVersionViewPermission(
            webpages_UserProfile userProfile)
        {
            GrantPermission(userProfile, Models.Permission.kScreeningLevelVersionViewPermission);
        }

        /// <summary>
        /// Revoke screening level version view permission
        /// </summary>
        /// <param name="userProfile"></param>
        public void RevokeScreeningLevelVersionViewPermission(
            webpages_UserProfile userProfile)
        {
            RevokePermission(userProfile, Models.Permission.kScreeningLevelVersionViewPermission);
        }

        /// <summary>
        /// Grant permission to all account manager
        /// </summary>
        public void GrantPermissionForAllAccountManagers()
        {
            foreach (var accountManager in this.ScreeningLevel.Contract.ClientCompany.AccountManagers)
            {
                GrantScreeningLevelVersionViewPermission(accountManager);
                GrantScreeningCreatePermission(accountManager);
            }
        }

        /// <summary>
        /// Grant permission to all client of this contract
        /// </summary>
        public void GrantPermissionForAllClients()
        {
            foreach (var client in this.ScreeningLevel.Contract.ClientCompany.ClientUserProfiles)
            {
                GrantScreeningLevelVersionViewPermission(client);
                GrantScreeningCreatePermission(client);
            }
        }

        /// <summary>
        /// Revoke permission to all account manager
        /// </summary>
        public void RevokePermissionForAllAccountManagers()
        {
            foreach (var accountManager in this.ScreeningLevel.Contract.ClientCompany.AccountManagers)
            {
                RevokeScreeningLevelVersionViewPermission(accountManager);
                RevokeScreeningCreatePermission(accountManager);

            }
        }

        /// <summary>
        /// Grant permission to all client of this contract
        /// </summary>
        public void RevokePermissionForAllClients()
        {
            foreach (var client in this.ScreeningLevel.Contract.ClientCompany.ClientUserProfiles)
            {
                RevokeScreeningLevelVersionViewPermission(client);
            }
        }

        #endregion

        public IEnumerable<Screening> GetAllScreenings()
        {
            return this.Screening;
        } 
    }
}
