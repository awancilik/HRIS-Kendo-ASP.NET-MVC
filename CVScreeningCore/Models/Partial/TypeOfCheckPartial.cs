//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.ObjectModel;
using System.Linq;
using CVScreeningCore.Models.AtomicCheckState;
using CVScreeningCore.Models;

namespace CVScreeningCore.Models
{
    using System;
    using System.Collections.Generic;

    public enum TypeOfCheckEnum
    {
        EDUCATION_CHECK_STANDARD = 1,
        EDUCATION_CHECK_WITH_EVIDENCE,
        EMPLOYMENT_CHECK_STANDARD,
        EMPLOYMENT_CHECK_PERFORMANCE,
        POLICE_CHECK,
        LITIGATION_CHECK_CIVIL,
        LITIGATION_CHECK_CRIMINAL,
        LITIGATION_CHECK_CIVIL_CRIMINAL,
        BANKRUPTY_CHECK,
        INDUSTRIAL_CHECK,
        MEDIA_CHECK_SIMPLIFIED,
        MEDIA_CHECK_COMPREHENSIVE,
        PROFESSIONNAL_QUALIFICATION_CHECK,
        ID_CHECK,
        PASSPORT_CHECK,
        DRIVING_LICENSE_CHECK,
        NEIGHBOURHOOD_CHECK,
        REFERENCES_CHECK,
        REVERSE_DIRECTORSHIP,
        GROUP_SANCTIONS_CHECK,
        CONTACT_NUMBER_CHECK,
        MEDICAL_CHECK,
        CREDIT_CHECK,
        END_OF_ENUM
    }
    
    public partial class TypeOfCheck:IEntity
    {
        #region IEntity interface method definition

        public void SetId(int id)
        {
            TypeOfCheckId = id;
        }

        public int GetId()
        {
            return TypeOfCheckId;
        }

        public void SetTenantId(byte id)
        {
            TypeOfCheckTenantId = id;
        }

        public byte GetTenantId()
        {
            return TypeOfCheckTenantId;
        }

        public void InitializeEntity()
        {

        }

        #endregion

        /// <summary>
        /// Return a collection of all type of checks indexed by type of checks code
        /// Collection is initialized with default value
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="defaultValue"></param>
        /// <returns></returns>
        public static IList<T> InitializeTypeOfChecksCollection<T>(T defaultValue)
        {
            var typeOfCheck = new List<T>();
            for (int i = 0; i < (int) TypeOfCheckEnum.END_OF_ENUM + 1; i++)
            {
                typeOfCheck.Add(defaultValue);
            }
            return typeOfCheck;
        }

        /// <summary>
        /// Return true whether the type of check could be qualified with qualification place
        /// For instance, police check returns yes but media check returns false
        /// </summary>
        /// <returns></returns>
        public bool IsQualificationNeeded()
        {
            switch (this.TypeOfCheckCode)
            {
                // Check done at the office
                case (Byte)TypeOfCheckEnum.EDUCATION_CHECK_STANDARD:
                case (Byte)TypeOfCheckEnum.EDUCATION_CHECK_WITH_EVIDENCE:
                case (Byte)TypeOfCheckEnum.EMPLOYMENT_CHECK_STANDARD:
                case (Byte)TypeOfCheckEnum.EMPLOYMENT_CHECK_PERFORMANCE:
                case (Byte)TypeOfCheckEnum.POLICE_CHECK:
                case (Byte)TypeOfCheckEnum.LITIGATION_CHECK_CIVIL:
                case (Byte)TypeOfCheckEnum.LITIGATION_CHECK_CRIMINAL:
                case (Byte)TypeOfCheckEnum.LITIGATION_CHECK_CIVIL_CRIMINAL:
                case (Byte)TypeOfCheckEnum.INDUSTRIAL_CHECK:
                case (Byte)TypeOfCheckEnum.BANKRUPTY_CHECK:
                case (Byte)TypeOfCheckEnum.PROFESSIONNAL_QUALIFICATION_CHECK:
                case (Byte)TypeOfCheckEnum.PASSPORT_CHECK:
                case (Byte)TypeOfCheckEnum.DRIVING_LICENSE_CHECK:
                case (Byte)TypeOfCheckEnum.ID_CHECK:
                case (Byte)TypeOfCheckEnum.NEIGHBOURHOOD_CHECK:
                case (Byte)TypeOfCheckEnum.CONTACT_NUMBER_CHECK:

                    return true;

                //Check done on the field
                case (Byte)TypeOfCheckEnum.MEDIA_CHECK_SIMPLIFIED:
                case (Byte)TypeOfCheckEnum.MEDIA_CHECK_COMPREHENSIVE:
                case (Byte)TypeOfCheckEnum.REFERENCES_CHECK:
                case (Byte)TypeOfCheckEnum.REVERSE_DIRECTORSHIP:
                case (Byte)TypeOfCheckEnum.GROUP_SANCTIONS_CHECK:
                case (Byte)TypeOfCheckEnum.CREDIT_CHECK:
                case (Byte)TypeOfCheckEnum.MEDICAL_CHECK:
                    return false;
            }
            return false;
        }

        /// <summary>
        /// Return true whether the type of check could be qualified with qualification place
        /// For instance, police check returns yes but media check returns false
        /// </summary>
        /// <returns></returns>
        public bool HasQualificationPlace()
        {
            switch (this.TypeOfCheckCode)
            {
                // Check done at the office
                case (Byte)TypeOfCheckEnum.EDUCATION_CHECK_STANDARD:
                case (Byte)TypeOfCheckEnum.EDUCATION_CHECK_WITH_EVIDENCE:
                case (Byte)TypeOfCheckEnum.EMPLOYMENT_CHECK_STANDARD:
                case (Byte)TypeOfCheckEnum.EMPLOYMENT_CHECK_PERFORMANCE:
                case (Byte)TypeOfCheckEnum.POLICE_CHECK:
                case (Byte)TypeOfCheckEnum.LITIGATION_CHECK_CIVIL:
                case (Byte)TypeOfCheckEnum.LITIGATION_CHECK_CRIMINAL:
                case (Byte)TypeOfCheckEnum.LITIGATION_CHECK_CIVIL_CRIMINAL:
                case (Byte)TypeOfCheckEnum.INDUSTRIAL_CHECK:
                case (Byte)TypeOfCheckEnum.BANKRUPTY_CHECK:
                case (Byte)TypeOfCheckEnum.PROFESSIONNAL_QUALIFICATION_CHECK:
                case (Byte)TypeOfCheckEnum.PASSPORT_CHECK:
                case (Byte)TypeOfCheckEnum.DRIVING_LICENSE_CHECK:
                case (Byte)TypeOfCheckEnum.ID_CHECK:
                    return true;

                //Check done on the field
                case (Byte)TypeOfCheckEnum.REFERENCES_CHECK:
                case (Byte)TypeOfCheckEnum.GROUP_SANCTIONS_CHECK:
                case (Byte)TypeOfCheckEnum.CONTACT_NUMBER_CHECK:
                case (Byte)TypeOfCheckEnum.MEDICAL_CHECK:
                case (Byte)TypeOfCheckEnum.CREDIT_CHECK:
                case (Byte)TypeOfCheckEnum.MEDIA_CHECK_SIMPLIFIED:
                case (Byte)TypeOfCheckEnum.MEDIA_CHECK_COMPREHENSIVE:
                case (Byte)TypeOfCheckEnum.NEIGHBOURHOOD_CHECK:
                case (Byte)TypeOfCheckEnum.REVERSE_DIRECTORSHIP:
                    return false;
            }
            return false;
        }

        /// <summary>
        /// Get first investigation place used for this type of check (in office or on field)
        /// </summary>
        /// <returns></returns>
        public string GetFirstInvestigationPlace()
        {
            return this.TypeOfCheckMeta.First(u => u.TypeOfCheckMetaKey ==
                CVScreeningCore.Models.TypeOfCheckMeta.kFirstInvestigationPlaceKey).TypeOfCheckMetaValue;
        }

        /// <summary>
        /// Get first investigation place used for this type of check (in office or on field)
        /// </summary>
        /// <returns></returns>
        public string GetSecondInvestigationPlace()
        {
            string place = this.TypeOfCheckMeta.First(u => u.TypeOfCheckMetaKey ==
                CVScreeningCore.Models.TypeOfCheckMeta.kSecondInvestigationPlaceKey).TypeOfCheckMetaValue;

            return place != CVScreeningCore.Models.TypeOfCheckMeta.kInvestigationPlaceNotApplicableValue ? place : "";
        }

        /// <summary>
        /// Get average completion rate for a category
        /// </summary>
        /// <returns></returns>
        public int GetAverageCompletionRate(string category)
        {
            return int.Parse(this.TypeOfCheckMeta.First(u => u.TypeOfCheckMetaKey ==
                CVScreeningCore.Models.TypeOfCheckMeta.kAverageCompletionRateKey && u.TypeOfCheckMetaCategory == category)
                    .TypeOfCheckMetaValue);
        }


        /// <summary>
        /// Get average completion rate for a category
        /// </summary>
        /// <returns></returns>
        public int GetCompletionMinimumWorkingDays(string category)
        {
            return int.Parse(this.TypeOfCheckMeta.First(u => u.TypeOfCheckMetaKey ==
                CVScreeningCore.Models.TypeOfCheckMeta.kCompletionMinimumWorkingDays && u.TypeOfCheckMetaCategory == category)
                    .TypeOfCheckMetaValue);
        }

        /// <summary>
        /// Get first investigation place used for this type of check (in office or on field)
        /// </summary>
        /// <returns></returns>
        public bool CanBeWronglyQualified()
        {
            string value = this.TypeOfCheckMeta.First(u => u.TypeOfCheckMetaKey ==
                CVScreeningCore.Models.TypeOfCheckMeta.kCanBeWronlyQualifiedKey).TypeOfCheckMetaValue;
            return value == CVScreeningCore.Models.TypeOfCheckMeta.kYesValue ? true : false;
        }

        /// <summary>
        /// Return true whether this type of check is an education type of check: education check standard or with evidence
        /// </summary>
        /// <returns></returns>
        public bool IsEducationTypeOfCheck()
        {
            return (this.TypeOfCheckCode ==  (Byte)TypeOfCheckEnum.EDUCATION_CHECK_STANDARD || 
             this.TypeOfCheckCode ==(Byte)TypeOfCheckEnum.EDUCATION_CHECK_WITH_EVIDENCE);
        }

        /// <summary>
        /// Return true whether this type of check is an employment type of check: standard or performance
        /// </summary>
        /// <returns></returns>
        public bool IsEmploymentTypeOfCheck()
        {
            return (this.TypeOfCheckCode == (Byte)TypeOfCheckEnum.EMPLOYMENT_CHECK_PERFORMANCE ||
             this.TypeOfCheckCode == (Byte)TypeOfCheckEnum.EMPLOYMENT_CHECK_STANDARD);
        }

        /// <summary>
        /// Return true whether this type of check is an neighborhood check
        /// </summary>
        /// <returns></returns>
        public bool IsNeighborhoodTypeOfCheck()
        {
            return (this.TypeOfCheckCode == (Byte)TypeOfCheckEnum.NEIGHBOURHOOD_CHECK);
        }

        /// <summary>
        /// Return true whether this type of check is an neighborhood check
        /// </summary>
        /// <returns></returns>
        public bool IsContactNumberTypeOfCheck()
        {
            return (this.TypeOfCheckCode == (Byte)TypeOfCheckEnum.CONTACT_NUMBER_CHECK);
        }

        /// <summary>
        /// Returns true whether the summary field of an atomic check is mandatory or not
        /// </summary>
        /// <param name="atomicCheckState"></param>
        /// <returns></returns>
        public bool IsSummaryMandatory(AtomicCheckStateType atomicCheckState)
        {
            if (atomicCheckState == AtomicCheckStateType.DONE_OK)
            {
                // No need to retrieve from the databases as it is everytime false so far
                return false;
            }
            else if (atomicCheckState == AtomicCheckStateType.DONE_KO)
            {
                return this.TypeOfCheckMeta.First(u => u.TypeOfCheckMetaKey ==
                    CVScreeningCore.Models.TypeOfCheckMeta.kReportSummaryDoneKoKey).TypeOfCheckMetaValue
                    == CVScreeningCore.Models.TypeOfCheckMeta.kReportSummaryMandatoryValue;
            }
            else if (atomicCheckState == AtomicCheckStateType.DONE_DISCREPANCY)
            {
                return true;
            }
            else if (atomicCheckState == AtomicCheckStateType.DONE_IMPOSSIBLE)
            {
                return true;
            }
            else if (atomicCheckState == AtomicCheckStateType.PENDING_CONFIRMATION)
            {
                return true;
            }
            return false;
        }


        /// <summary>
        /// Whether the type of check has availibility criterion
        /// </summary>
        /// <returns></returns>
        public bool HasAvailibilityCriterion()
        {
            return this.TypeOfCheckMeta.FirstOrDefault(e => e.TypeOfCheckMetaKey == Models.
                TypeOfCheckMeta.kAvailabilityCriterion).TypeOfCheckMetaValue == Models.TypeOfCheckMeta.kYesValue;
        }

        /// <summary>
        /// Whether the type of check has workload criterion
        /// </summary>
        /// <returns></returns>
        public bool HasWorkloadCriterion()
        {
            return this.TypeOfCheckMeta.FirstOrDefault(e => e.TypeOfCheckMetaKey == Models.
                TypeOfCheckMeta.kWorkLoadCriterion).TypeOfCheckMetaValue == Models.TypeOfCheckMeta.kYesValue;
        }
        
        
        /// <summary>
        /// Whether the type of check has already assigned criterion
        /// </summary>
        /// <returns></returns>
        public bool HasAlreadyAssignedCriterion()
        {
            return this.TypeOfCheckMeta.FirstOrDefault(e => e.TypeOfCheckMetaKey == Models.
                TypeOfCheckMeta.kAlreadyAssignedCriterion).TypeOfCheckMetaValue == Models.TypeOfCheckMeta.kYesValue;
        }

        /// <summary>
        /// Whether the type of check has skill criterion
        /// </summary>
        /// <returns></returns>
        public bool HasSkillCriterion(string category)
        {
            var chosenMeta = this.TypeOfCheckMeta.FirstOrDefault(e => e.TypeOfCheckMetaKey == Models.
                TypeOfCheckMeta.kSkillCriterion && e.TypeOfCheckMetaCategory == category);

            return chosenMeta != null ? 
                chosenMeta.TypeOfCheckMetaValue == Models.TypeOfCheckMeta.kYesValue : false;
        }

        /// <summary>
        /// Whether the type of check has geographical criterion
        /// </summary>
        /// <returns></returns>
        public bool HasGeographicalCriterion()
        {
            return this.TypeOfCheckMeta.FirstOrDefault(e => e.TypeOfCheckMetaKey == Models.
                TypeOfCheckMeta.kGeographicalCriterion).TypeOfCheckMetaValue == Models.TypeOfCheckMeta.kYesValue;
        }

        /// <summary>
        /// Whether the type of check is a office type of check
        /// </summary>
        /// <returns></returns>
        public bool IsOfficeTypeOfCheck()
        {
            return this.TypeOfCheckMeta.Any(e => e.TypeOfCheckMetaCategory == Models.
                TypeOfCheckMeta.kOfficeCategory);
        }
        
        /// <summary>
        /// Whether the type of check is a office type of check
        /// </summary>
        /// <returns></returns>
        public bool IsOnFieldTypeOfCheck()
        {
            return this.TypeOfCheckMeta.Any(e => e.TypeOfCheckMetaCategory == Models.
                TypeOfCheckMeta.kOnFieldCategory);
        }

        /// <summary>
        /// Retrieve the summary verification default value that needs to displayed in the report
        /// </summary>
        /// <param name="atomicCheckState"></param>
        /// <returns></returns>
        public string GetVerificationSummaryDefaultValue(AtomicCheckStateType atomicCheckState)
        {
            // Type of check that are mandatory does not have default value
            if (IsSummaryMandatory(atomicCheckState))
            {
                return String.Empty;
            }
            if (atomicCheckState == AtomicCheckStateType.DONE_OK)
            {
                return this.TypeOfCheckMeta.First(u => u.TypeOfCheckMetaKey ==
                    CVScreeningCore.Models.TypeOfCheckMeta.kReportSummaryDoneOkKey).TypeOfCheckMetaValue;
            }
            else if (atomicCheckState == AtomicCheckStateType.DONE_KO)
            {
                return this.TypeOfCheckMeta.First(u => u.TypeOfCheckMetaKey ==
                    CVScreeningCore.Models.TypeOfCheckMeta.kReportSummaryDoneKoKey).TypeOfCheckMetaValue;
            }
            return String.Empty;
        }

    }
}
