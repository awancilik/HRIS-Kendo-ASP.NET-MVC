//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;

namespace CVScreeningCore.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class webpages_UserProfile:IEntity
    {
        #region IEntity interface method definition

        public void SetId(int id)
        {
            UserId = id;
        }

        public int GetId()
        {
            return UserId;
        }

        public void SetTenantId(byte id)
        {
            UserProfileTenantId = id;
        }

        public byte GetTenantId()
        {
            return UserProfileTenantId;
        }

        public void InitializeEntity()
        {

        }

        #endregion

        #region Role of user profile checks

        /// <summary>
        /// Return true whether the user is an administrator
        /// </summary>
        /// <returns></returns>
        public bool IsAdministrator()
        {
            return this.webpages_Roles.Any(u => u.RoleName == Models.webpages_Roles.kAdministratorRole);
        }

        /// <summary>
        /// Return true whether the user is an AM
        /// </summary>
        /// <returns></returns>
        public bool IsAccountManager()
        {
            return this.webpages_Roles.Any(u => u.RoleName == Models.webpages_Roles.kAccountManagerRole);
        }

        /// <summary>
        /// Return true whether the user is a production manager
        /// </summary>
        /// <returns></returns>
        public bool IsProductionManager()
        {
            return this.webpages_Roles.Any(u => u.RoleName == Models.webpages_Roles.kProductionManagerRole);
        }

        /// <summary>
        /// Return true whether the user is a qualifier
        /// </summary>
        /// <returns></returns>
        public bool IsQualifier()
        {
            return this.webpages_Roles.Any(u => u.RoleName == Models.webpages_Roles.kQualifierRole);
        }

        /// <summary>
        /// Return true whether the user is a quality control
        /// </summary>
        /// <returns></returns>
        public bool IsQualityControl()
        {
            return this.webpages_Roles.Any(u => u.RoleName == Models.webpages_Roles.kQualityControlRole);
        }

        /// <summary>
        /// Return true whether the user is a client
        /// </summary>
        /// <returns></returns>
        public bool IsClient()
        {
            return this.webpages_Roles.Any(u => u.RoleName == Models.webpages_Roles.kClientRole);
        }

        /// <summary>
        /// Return true whether the user is a hr
        /// </summary>
        /// <returns></returns>
        public bool IsHr()
        {
            return this.webpages_Roles.Any(u => u.RoleName == Models.webpages_Roles.kHrRole);
        }

        /// <summary>
        /// Return true whether the user is a screener
        /// </summary>
        /// <returns></returns>
        public bool IsScreener()
        {
            return this.webpages_Roles.Any(u => u.RoleName == Models.webpages_Roles.kScreenerRole);
        }

        #endregion

        #region Permission

        /// <summary>
        /// Grantt permission for client account when account is created
        /// </summary>
        /// <param name="clientCompany"></param>
        public void GrantPermissionForClient(ClientCompany clientCompany)
        {
            foreach (var contract in clientCompany.Contract)
            {
                contract.GrantContractViewPermission(this);
                foreach (var screeningLevel in contract.ScreeningLevel)
                {
                    screeningLevel.GrantScreeningLevelViewPermission(this);
                    foreach (var screeningLevelVersion in screeningLevel.ScreeningLevelVersion)
                    {
                        screeningLevelVersion.GrantScreeningLevelVersionViewPermission(this);
                        screeningLevelVersion.GrantScreeningCreatePermission(this);
                        foreach (var screening in screeningLevelVersion.Screening)
                        {
                            screening.GrantPermissionForClient(this);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Revoke permission for client account when account is created
        /// </summary>
        /// <param name="clientCompany"></param>
        public void RevokePermissionForClient(ClientCompany clientCompany)
        {
            foreach (var contract in clientCompany.Contract)
            {
                contract.RevokeContractViewPermission(this);
                foreach (var screeningLevel in contract.ScreeningLevel)
                {
                    screeningLevel.RevokeScreeningLevelViewPermission(this);
                    foreach (var screeningLevelVersion in screeningLevel.ScreeningLevelVersion)
                    {
                        screeningLevelVersion.RevokeScreeningLevelVersionViewPermission(this);
                        screeningLevelVersion.RevokeScreeningCreatePermission(this);
                        foreach (var screening in screeningLevelVersion.Screening)
                        {
                            screening.RevokePermissionForClient(this);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Grant permission for account manager to this company content
        /// </summary>
        public void GrantPermissionForAccountManager(ClientCompany clientCompany)
        {
            foreach (var contract in clientCompany.Contract)
            {
                contract.GrantContractViewPermission(this);
                foreach (var screeningLevel in contract.ScreeningLevel)
                {
                    screeningLevel.GrantScreeningLevelViewPermission(this);
                    foreach (var screeningLevelVersion in screeningLevel.ScreeningLevelVersion)
                    {
                        screeningLevelVersion.GrantScreeningLevelVersionViewPermission(this);
                        screeningLevelVersion.GrantScreeningCreatePermission(this);
                        foreach (var screening in screeningLevelVersion.Screening)
                        {
                            screening.GrantPermissionForAccountManager(this);
                        }
                    }
                }
            }
        }


        /// <summary>
        /// Revoke permission for account manager to this company content
        /// </summary>
        public void RevokePermissionForAccountManager(ClientCompany clientCompany)
        {
            foreach (var contract in clientCompany.Contract)
            {
                contract.RevokeContractViewPermission(this);
                foreach (var screeningLevel in contract.ScreeningLevel)
                {
                    screeningLevel.RevokeScreeningLevelViewPermission(this);
                    foreach (var screeningLevelVersion in screeningLevel.ScreeningLevelVersion)
                    {
                        screeningLevelVersion.RevokeScreeningLevelVersionViewPermission(this);
                        screeningLevelVersion.RevokeScreeningCreatePermission(this);
                        foreach (var screening in screeningLevelVersion.Screening)
                        {
                            screening.RevokePermissionForAccountManager(this);
                        }
                    }
                }
            }
        }

        #endregion

        public ICollection<AtomicCheck> GetAtomicChecks()
        {
            return this.AtomicCheck;
        }

        /// <summary>
        /// Remove an atomic check from the screener
        /// </summary>
        /// <param name="atomicCheck"></param>
        public void RemoveAtomicCheck(AtomicCheck atomicCheck)
        {
            this.AtomicCheck.Remove(atomicCheck);
            atomicCheck.Screener = null;
        }
    }
}
