//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using System.Reflection;
using CVScreeningCore.Error;
using CVScreeningCore.Exception;
using CVScreeningCore.Models.AtomicCheckState;
using CVScreeningCore.Models.AtomicCheckValidationState;
using Nalysa.Common.Log;


namespace CVScreeningCore.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class AtomicCheck:IEntity
    {
        #region Constant atomic check 

        /// <summary>
        /// Atomic check type: current company
        /// </summary>
        public const string kCurrentCompanyType = "Current company";

        /// <summary>
        /// Atomic check type: on field
        /// </summary>
        public const string kOtherCompanyType = "Other company";

        /// <summary>
        /// Atomic check category: office
        /// </summary>
        public const string kOfficeCategory = "Office";

        /// <summary>
        /// Atomic check category: on field
        /// </summary>
        public const string kOnFieldCategory = "On field";

        /// <summary>
        /// Atomic check type: high school
        /// </summary>
        public const string kHighSchoolType = "High school";

        /// <summary>
        /// Atomic check type: faculty
        /// </summary>
        public const string kFacultyType = "Faculty";

        /// <summary>
        /// Atomic check type: home phone number
        /// </summary>
        public const string kHomePhoneNumberType = "Home phone number";

        /// <summary>
        /// Atomic check type: Mobile phone number
        /// </summary>
        public const string kMobilePhoneNumberType = "Mobile phone number";


        /// <summary>
        /// Atomic check type: Emergency contact
        /// </summary>
        public const string kEmergencyContactType = "Emergency contact";

        /// <summary>
        /// Atomic check type: Current address
        /// </summary>
        public const string kCurrentAddressType = "Current address";

        /// <summary>
        /// Atomic check type: high school
        /// </summary>
        public const string kCVAddressType = "CV address";

        /// <summary>
        /// Atomic check type: ID Card address
        /// </summary>
        public const string kIDCardAddressType = "ID Card address";

        #endregion

        #region Atomic check state and validation state

        /// <summary>
        /// Atomic check state
        /// </summary>
        private AtomicCheckState.AtomicCheckState _state;

        /// <summary>
        /// Atomic check validation state
        /// </summary>
        private AtomicCheckValidationState.AtomicCheckValidationState _validationState;


        /// <summary>
        /// Atomic check state
        /// </summary>
        public AtomicCheckState.AtomicCheckState State
        {
            get
            {
                if (_state == null)
                    _state = AtomicCheckStateFactory.Get(this, (AtomicCheckStateType)this.AtomicCheckState);
                return _state;
            }
            set
            {
                // Status is updated
                if (_state.GetType() == value.GetType())
                    return;

                var oldValue = _state;
                _state = value;

                this.StatusHasBeenUpdated(oldValue, value); // Event trigger when atomic check status is updated
            }
        }

        /// <summary>
        /// Atomic check validation state
        /// </summary>
        public AtomicCheckValidationState.AtomicCheckValidationState ValidationState
        {
            get {
                if (_validationState == null)
                {
                    _validationState = AtomicCheckValidationStateFactory.Get(
                        this, (AtomicCheckValidationStateType)this.AtomicCheckValidationState);
                }
                return _validationState;
            }
            set
            {
                // Validate status is updated
                if (_validationState.GetType() == value.GetType())
                    return;

                var oldValue = _validationState;
                _validationState = value;

                this.ValidationStatusHasBeenUpdated(oldValue, value);  // Event trigger when atomic check status is updated
            }
        }

        /// <summary>
        /// Trigger called when atomic check status has been updated
        /// </summary>
        private void StatusHasBeenUpdated(
            AtomicCheckState.AtomicCheckState oldStatus, AtomicCheckState.AtomicCheckState newStatus)
        {
            this.History.Add(new History
            {
                HistoryAction = CVScreeningCore.Models.History.kAtomicCheckStatusUpdateAction,
                HistoryCreatedDate = DateTime.Now,
                HistoryScreeningOldStatus = this.Screening.ScreeningState,
                HistoryScreeningNewStatus = this.Screening.ScreeningState,
                HistoryAtomicCheckOldStatus = (Byte)oldStatus.GetCode(),
                HistoryAtomicCheckNewStatus = (Byte)newStatus.GetCode(),
                HistoryAtomicCheckOldValidationStatus = this.AtomicCheckValidationState,
                HistoryAtomicCheckNewValidationStatus = this.AtomicCheckValidationState,
                AtomicCheck = this,
                Screening = this.Screening
            });

            this.Screening.ComputeScreeningState(); // Computer new screening state
        }

        /// <summary>
        /// Create history item when atomic check is created
        /// </summary>
        public void InsertHistoryWhenAtomicCheckCreated()
        {
            this.History.Add(new History
            {
                HistoryAction = CVScreeningCore.Models.History.kAtomicCheckCreationAction,
                HistoryCreatedDate = DateTime.Now,
                HistoryScreeningOldStatus = this.Screening.ScreeningState,
                HistoryScreeningNewStatus = this.Screening.ScreeningState,
                HistoryAtomicCheckNewStatus = (Byte)AtomicCheckStateType.NEW,
                HistoryAtomicCheckNewValidationStatus = (Byte)AtomicCheckValidationStateType.NOT_PROCESSED,
                AtomicCheck = this,
                Screening = this.Screening
            });
        }

        /// <summary>
        /// Trigger called when atomic check validation status has been updated
        /// </summary>
        private void ValidationStatusHasBeenUpdated(
            AtomicCheckValidationState.AtomicCheckValidationState oldValidationStatus,
            AtomicCheckValidationState.AtomicCheckValidationState newValidationStatus)
        {
            this.History.Add(new History
            {
                HistoryAction = CVScreeningCore.Models.History.kAtomicCheckValidationStatusUpdateAction,
                HistoryCreatedDate = DateTime.Now,
                HistoryScreeningOldStatus = this.Screening.ScreeningState,
                HistoryScreeningNewStatus = this.Screening.ScreeningState,
                HistoryAtomicCheckOldStatus = this.AtomicCheckState,
                HistoryAtomicCheckNewStatus = this.AtomicCheckState,
                HistoryAtomicCheckOldValidationStatus = (Byte)oldValidationStatus.GetCode(),
                HistoryAtomicCheckNewValidationStatus = (Byte)newValidationStatus.GetCode(),
                AtomicCheck = this,
                Screening = this.Screening
            });

            this.Screening.ComputeScreeningState(); // Computer new screening state
        }

        /// <summary>
        /// Setter for atomic check state.
        /// </summary>
        /// <returns></returns>
        public void setState(AtomicCheckStateType stateType)
        {
            State = AtomicCheckStateFactory.Get(this, stateType);
        }

        /// <summary>
        /// Setter for atomic check validation state.
        /// </summary>
        /// <returns></returns>
        public void setValidationState(AtomicCheckValidationStateType stateType)
        {
            ValidationState = AtomicCheckValidationStateFactory.Get(this, stateType);
        }


        #endregion

        #region IEntity interface method definition

        public void SetId(int id)
        {
            AtomicCheckId = id;
        }


        public int GetId()
        {
            return AtomicCheckId;
        }

        public void SetTenantId(byte id)
        {
            AtomicCheckTenantId = id;
        }

        public byte GetTenantId()
        {
            return AtomicCheckTenantId;
        }

        public void InitializeEntity()
        {
        }

        #endregion

        /// <summary>
        /// Get type of checks of this atomic check
        /// </summary>
        /// <returns></returns>
        public TypeOfCheck GetTypeOfCheck()
        {
            return this.TypeOfCheckScreeningLevelVersion.TypeOfCheck;
        }

        /// <summary>
        /// Reset an atomic check to its initial state
        /// </summary>
        public void ResetAtomicCheck()
        {
            this.State.ToNew();
            this.QualificationPlace = null;
            this.AtomicCheckSummary = "";
            this.AtomicCheckReport = "";
            this.AtomicCheckRemarks = "";
            this.Attachment.Clear();
            foreach (var discussion in Discussion)
            {
                discussion.Message.Clear();
                if (this.Screener != null)
                    discussion.RevokeInternalAtomicCheckManageDiscussionPermission(this.Screener);
            }
            this.UnassignAtomicCheck();
        }

        /// <summary>
        /// Close an atomic check
        /// </summary>
        public void DisabledAtomicCheck()
        {
            this.State.ToDisabled();
            this.QualificationPlace = null;
            this.AtomicCheckSummary = "";
            this.AtomicCheckReport = "";
            this.AtomicCheckRemarks = "";
            this.Attachment.Clear();
            foreach (var discussion in Discussion)
            {
                discussion.Message.Clear();
                if (this.Screener != null)
                    discussion.RevokeInternalAtomicCheckManageDiscussionPermission(this.Screener);
            }
            this.UnassignAtomicCheck();
        }

        /// <summary>
        /// Assign screener to an atomic check
        /// </summary>
        /// <param name="screener"></param>
        public void AssignAtomicCheck(webpages_UserProfile screener)
        {
            // Only user profile with role screener can have screening role assigned
            if (screener.webpages_Roles.All(u => u.RoleName != webpages_Roles.kScreenerRole))
                throw new ExceptionAccountNotBelongsToScreenerRole();

            if (screener.ScreenerCategory != this.AtomicCheckCategory)
                throw new ExceptionAtomicCheckAssignCategoryMismatch();

            // Assignement not possible with a screening already deactivated
            if (this.Screening.ScreeningIsDeactivated)
                throw new ExceptionScreeningDeactivated();

            // Atomic check is not applicable. Cannot be assigned to someone
            if (this.IsNotApplicable())
                throw new ExceptionAtomicCheckNotApplicable();

            // Atomic check is not applicable. Cannot be assigned to someone
            if (!this.IsQualified())
                throw new ExceptionAtomicCheckNotQualified();

            // Revoke permission from previous screener
            var previousScreener = this.Screener;
            this.Screener = screener;
            screener.AtomicCheck.Add(this);
            GrantPermissionForScreener(this.Screener);

            // Update status to on going
            if (this.IsNew() || this.IsOnProcessForwarded())
                this.State.ToOnGoing();

            if (previousScreener != null && previousScreener != screener)
            {
                RevokePermissionForScreener(previousScreener);
                previousScreener.AtomicCheck.Remove(this);
            }
        }

        /// <summary>
        /// Unassign screener to an atomic check
        /// </summary>
        public void UnassignAtomicCheck()
        {
            // Revoke permission from previous screener
            var previousScreener = this.Screener;

            if (previousScreener != null)
                RevokePermissionForScreener(previousScreener);

            this.Screener = null;
        }

        /// <summary>
        /// Reset address qualification if atomic check has been wrongly qualified
        /// </summary>
        public void ResetAddressIfNeighborhoodCheckAndWronglyQualified()
        {
            // If address is wrongly qualified, reset it
            if (this.IsWronglyQualified() && this.IsNeighborhoodCurrentAddress())
            {
                this.Screener.RemoveAtomicCheck(this);
                this.Screening.ScreeningQualification.ResetCurrentAddress();
            }
            if (this.IsWronglyQualified() && this.IsNeighborhoodCVAddress())
            {
                this.Screener.RemoveAtomicCheck(this);
                this.Screening.ScreeningQualification.ResetCVAddress();
            }
            if (this.IsWronglyQualified() && this.IsNeighborhoodIDCardAddress())
            {
                this.Screener.RemoveAtomicCheck(this);
                this.Screening.ScreeningQualification.ResetIDCardAddress();
            }
        }

        #region Metadata getter and setter

        /// <summary>
        /// Returns true where the atomic check can be set to status wrongly qualified
        /// Checking is done using atomic check type of check metadata
        /// </summary>
        /// <returns></returns>
        public bool CanBeWronglyQualified()
        {
            return this.TypeOfCheckScreeningLevelVersion.TypeOfCheck.CanBeWronglyQualified();
        }

        /// <summary>
        /// Returns true where the summary fields needs to be filled or not.
        /// Checking is done using atomic check type of check metadata
        /// </summary>
        /// <returns></returns>
        public bool IsSummaryMandatory()
        {
            return this.TypeOfCheckScreeningLevelVersion.TypeOfCheck.IsSummaryMandatory((AtomicCheckStateType)this.AtomicCheckState);
        }

        /// <summary>
        /// Returns true where the summary fields needs to be filled or not.
        /// Checking is done using atomic check type of check metadata and the next atomic check state
        /// </summary>
        /// <returns>Next atomic check state</returns>
        public bool IsSummaryMandatory(AtomicCheckStateType nextAtomicCheckState)
        {
            return this.TypeOfCheckScreeningLevelVersion.TypeOfCheck.IsSummaryMandatory(nextAtomicCheckState);
        }

        /// <summary>
        /// Retrieve the summary verification default value that needs to displayed in the report
        /// </summary>
        /// <returns></returns>
        public string GetSummaryVerificationValue()
        {
            if (IsSummaryMandatory())
                return this.AtomicCheckSummary;

            return this.TypeOfCheckScreeningLevelVersion.TypeOfCheck.GetVerificationSummaryDefaultValue(
                (AtomicCheckStateType)this.AtomicCheckState);
        }

        /// <summary>
        /// Retrieve first investigation place 
        /// </summary>
        /// <returns></returns>
        public string GetFirstInvestigationPlace()
        {
            return this.TypeOfCheckScreeningLevelVersion.TypeOfCheck.GetFirstInvestigationPlace();
        }

        /// <summary>
        /// Retrieve second investigation place 
        /// </summary>
        /// <returns></returns>
        public string GetSecondInvestigationPlace()
        {
            return this.TypeOfCheckScreeningLevelVersion.TypeOfCheck.GetSecondInvestigationPlace();
        }

        #endregion

        #region Getter atomic check action that can be done

        /// <summary>
        /// Returns true whether the atomic can be assign or reassign to someone
        /// </summary>
        /// <returns></returns>
        public bool CanBeAssigned()
        {
            if (this.IsPendingConfirmation())
                return true;

            return (IsQualified() && (IsRejected() || IsNotProcessed()));
        }

        /// <summary>
        /// Returns true whether the atomic can be processed by a screener or not
        /// </summary>
        /// <returns></returns>
        public bool CanBeProcessed()
        {
            if (this.IsPendingConfirmation())
                return true;

            if (this.IsClosed())
                return false;
            return this.IsAssigned() && (this.ValidationState.IsNotProcessed() || this.ValidationState.IsRejected());
        }

        /// <summary>
        /// Returns true whether the atomic can be processed or not
        /// </summary>
        /// <returns></returns>
        public bool CanBeValidated()
        {
            if (this.IsPendingConfirmation())
                return false;

            return this.ValidationState.IsProcessed();
        }

        /// <summary>
        /// Returns true whether the atomic can be rejected or not
        /// </summary>
        /// <returns></returns>
        public bool CanBeRejected()
        {
            if (this.IsPendingConfirmation())
                return false;

            if (this.IsNotApplicable() || this.IsWronglyQualified())
                return false;
            return this.ValidationState.IsProcessed() || this.ValidationState.IsValidated();
        }

        /// <summary>
        /// Return true whether the atomic check is in a closing status or not
        /// </summary>
        /// <returns></returns>
        public bool IsClosed()
        {
            return this.IsDeactivated() || this.IsNotApplicable() || this.IsWronglyQualified();
        }

        /// <summary>
        /// Return information whether the atomic check is qualified or not
        /// </summary>
        /// <returns></returns>
        public bool IsQualified()
        {
            // Atomic check with status not applicable is qualified
            if (AtomicCheckState == (Byte)AtomicCheckStateType.NOT_APPLICABLE)
                return true;

            // Atomic check that does not need qualified are considered as qualified
            if (!TypeOfCheckScreeningLevelVersion.TypeOfCheck.IsQualificationNeeded())
                return true;

            // Passport check is qualified if immigration place is set and passport number is set
            if (TypeOfCheckScreeningLevelVersion.TypeOfCheck.TypeOfCheckCode ==
                (Byte)TypeOfCheckEnum.PASSPORT_CHECK)
            {
                return this.QualificationPlace != null && Screening.ScreeningQualification.ScreeningQualificationPassportNumber != null
                    && Screening.ScreeningQualification.ScreeningQualificationPassportNumber.Length != 0;
            }

            //! Atomic check that needs a qualification place
            if (TypeOfCheckScreeningLevelVersion.TypeOfCheck.HasQualificationPlace())
                return this.QualificationPlace != null;

            //! ID check is qualified if the card number is filled
            if (TypeOfCheckScreeningLevelVersion.TypeOfCheck.TypeOfCheckCode ==
                (Byte)TypeOfCheckEnum.ID_CHECK)
            {
                return this.QualificationPlace != null && Screening.ScreeningQualification.ScreeningQualificationIDCardNumber != null
                && Screening.ScreeningQualification.ScreeningQualificationIDCardNumber.Length != 0;
            }

            //! Neighbourhood check is qualified if at least CV address, ID address and current address is set
            if (TypeOfCheckScreeningLevelVersion.TypeOfCheck.TypeOfCheckCode ==
                (Byte)TypeOfCheckEnum.NEIGHBOURHOOD_CHECK)
            {
                if (this.AtomicCheckType == AtomicCheck.kIDCardAddressType)
                    return Screening.ScreeningQualification.IDCardAddress != null &&
                           Screening.ScreeningQualification.IDCardAddress.IsSet();

                if (this.AtomicCheckType == AtomicCheck.kCVAddressType)
                    return (Screening.ScreeningQualification.CVAddress != null &&
                            Screening.ScreeningQualification.CVAddress.IsSet());

                if (this.AtomicCheckType == AtomicCheck.kCurrentAddressType)
                    return (Screening.ScreeningQualification.CurrentAddress != null &&
                            Screening.ScreeningQualification.CurrentAddress.IsSet());

            }

            // Contact number check is qualified whether at least personal contact info are set
            if (TypeOfCheckScreeningLevelVersion.TypeOfCheck.TypeOfCheckCode ==
                (Byte)TypeOfCheckEnum.CONTACT_NUMBER_CHECK)
            {
                if (this.AtomicCheckType == AtomicCheck.kHomePhoneNumberType)
                    return this.Screening.ScreeningQualification.PersonalContactInfo != null && !String.IsNullOrEmpty(this.Screening.ScreeningQualification.PersonalContactInfo.HomePhoneNumber);

                if (this.AtomicCheckType == AtomicCheck.kMobilePhoneNumberType)
                    return this.Screening.ScreeningQualification.PersonalContactInfo != null && !String.IsNullOrEmpty(this.Screening.ScreeningQualification.PersonalContactInfo.MobilePhoneNumber);

                if (this.AtomicCheckType == AtomicCheck.kEmergencyContactType)
                    return this.Screening.ScreeningQualification.EmergencyContactPerson != null && this.Screening.ScreeningQualification.EmergencyContactPerson.ContactInfo != null
                        && !String.IsNullOrEmpty(this.Screening.ScreeningQualification.EmergencyContactPerson.ContactPersonName)
                        && !String.IsNullOrEmpty(this.Screening.ScreeningQualification.ScreeningQualificationRelationshipWithCandidate)
                        && !String.IsNullOrEmpty(this.Screening.ScreeningQualification.EmergencyContactPerson.ContactInfo.HomePhoneNumber);

            }
            return false;
        }

        /// <summary>
        /// Return true whether an atomic check is assigned or not
        /// </summary>
        /// <returns></returns>
        public bool IsAssigned()
        {
            return this.Screener != null;
        }

        #endregion

        #region Getter atomic check state

        /// <summary>
        /// Returns true whether the atomic is new
        /// </summary>
        /// <returns></returns>
        public bool IsNew()
        {
            return State.IsNew();
        }

        /// <summary>
        /// Returns true whether the atomic is on going or not
        /// </summary>
        /// <returns></returns>
        public bool IsOnGoing()
        {
            return State.IsOnGoing();
        }

        /// <summary>
        /// Returns true whether the atomic is done ok or not
        /// </summary>
        /// <returns></returns>
        public bool IsDoneOk()
        {
            return State.IsDoneOk();
        }

        /// <summary>
        /// Returns true whether the atomic is done ko or not
        /// </summary>
        /// <returns></returns>
        public bool IsDoneKo()
        {
            return State.IsDoneKo();
        }

        /// <summary>
        /// Returns true whether the atomic is done impossible or not
        /// </summary>
        /// <returns></returns>
        public bool IsDoneImpossible()
        {
            return State.IsDoneImpossible();
        }

        /// <summary>
        /// Returns true whether the atomic is done with discrepancy or not
        /// </summary>
        /// <returns></returns>
        public bool IsDoneDiscrepancy()
        {
            return State.IsDoneDiscrepancy();
        }

        /// <summary>
        /// Returns true whether the atomic is on process forwarded or not
        /// </summary>
        /// <returns></returns>
        public bool IsOnProcessForwarded()
        {
            return State.IsOnProcessForwarded();
        }

        /// <summary>
        /// Returns true whether the atomic is pending confirmation
        /// </summary>
        /// <returns></returns>
        public bool IsPendingConfirmation()
        {
            return State.IsPendingConfirmation();
        }

        /// <summary>
        /// Returns true whether the atomic is wrongly qualified
        /// </summary>
        /// <returns></returns>
        public bool IsWronglyQualified()
        {
            return State.IsWronglyQualified();
        }

        /// <summary>
        /// Returns true whether the atomic is not applicable or not
        /// </summary>
        /// <returns></returns>
        public bool IsNotApplicable()
        {
            return State.IsNotApplicable();
        }

        /// <summary>
        /// Returns true whether the atomic check is deactivated or not
        /// </summary>
        /// <returns></returns>
        public bool IsDeactivated()
        {
            return State.IsDeactivated();
        }

        /// <summary>
        /// Returns true whether the atomic check is disabled or not
        /// </summary>
        /// <returns></returns>
        public bool IsDisabled()
        {
            return State.IsDisabled();
        }


        #endregion
        
        #region Getter atomic check validation state

        /// <summary>
        /// Returns true whether the atomic is not processed or not
        /// </summary>
        /// <returns></returns>
        public bool IsNotProcessed()
        {
            return ValidationState.IsNotProcessed();
        }

        /// <summary>
        /// Returns true whether the atomic is processed or not
        /// </summary>
        /// <returns></returns>
        public bool IsProcessed()
        {
            return ValidationState.IsProcessed();
        }

        /// <summary>
        /// Returns true whether the atomic is rejected or not
        /// </summary>
        /// <returns></returns>
        public bool IsRejected()
        {
            return ValidationState.IsRejected();
        }

        /// <summary>
        /// Returns true whether the atomic is validated or not
        /// </summary>
        /// <returns></returns>
        public bool IsValidated()
        {
            return ValidationState.IsValidated();
        }

        #endregion

        #region Getter neighborhood check type

        /// <summary>
        /// Returns true whether this atomic check is an neighborhood type of check
        /// </summary>
        /// <returns></returns>
        public bool IsNeighborhoodCheck()
        {
            return this.TypeOfCheckScreeningLevelVersion.IsNeighborhoodTypeOfCheck();
        }

        /// <summary>
        /// Returns true whether this atomic check is linked to a current address
        /// </summary>
        /// <returns></returns>
        public bool IsNeighborhoodCurrentAddress()
        {
            return this.TypeOfCheckScreeningLevelVersion.IsNeighborhoodTypeOfCheck()
                   && this.AtomicCheckType == Models.AtomicCheck.kCurrentAddressType;
        }

        /// <summary>
        /// Returns true whether this atomic check is linked to a CV address
        /// </summary>
        /// <returns></returns>
        public bool IsNeighborhoodCVAddress()
        {
            return this.TypeOfCheckScreeningLevelVersion.IsNeighborhoodTypeOfCheck()
                   && this.AtomicCheckType == Models.AtomicCheck.kCVAddressType;
        }

        /// <summary>
        /// Returns true whether this atomic check is linked to a ID Card address
        /// </summary>
        /// <returns></returns>
        public bool IsNeighborhoodIDCardAddress()
        {
            return this.TypeOfCheckScreeningLevelVersion.IsNeighborhoodTypeOfCheck()
                   && this.AtomicCheckType == Models.AtomicCheck.kIDCardAddressType;
        }

        #endregion

        #region Screening discussion method

        /// <summary>
        /// Create discussion needed when an atomic check is created
        /// </summary>
        public void InitAtomicCheckDiscussions()
        {
            CreateInternalAtomicCheckDiscussion();
        }

        /// <summary>
        /// Create internal atomic check discussion that is used between AM, QC, Screener and Qualifier
        /// </summary>
        private void CreateInternalAtomicCheckDiscussion()
        {
            this.Discussion.Add(new Discussion
            {
                DiscussionTitle = string.Format("Internal discussion about {0} atomic check for screening {1}", this.AtomicCheckType, this.Screening.ScreeningFullName),
                DiscussionType = CVScreeningCore.Models.Discussion.kInternalAtomicCheckType,
                DiscussionCreatedDate = DateTime.Now,
                Screening = this.Screening,
                AtomicCheck = this,
            });
        }

        public Discussion GetInternalAtomicCheckDiscussion()
        {
            return this.Discussion.First(
                u => u.DiscussionType == CVScreeningCore.Models.Discussion.kInternalAtomicCheckType);
        }

        #endregion

        #region Permission

        /// <summary>
        /// Add permission for this atomic check
        /// </summary>
        /// <param name="userProfile"></param>
        /// <param name="permissionName"></param>
        private void GrantPermission(webpages_UserProfile userProfile, string permissionName)
        {

            if (!this.Permission.Any(p => p.AtomicCheck == this && p.UserProfile == userProfile
                                          && p.PermissionName == permissionName && p.PermissionIsGranted == true))
            {
                this.Permission.Add(new Permission
                {
                    AtomicCheck = this,
                    UserProfile = userProfile,
                    PermissionName = permissionName,
                    PermissionIsGranted = true
                });
            }
        }

        /// <summary>
        /// Clear permission for this atomic check
        /// </summary>
        /// <param name="userProfile"></param>
        /// <param name="permissionName"></param>
        private void RevokePermission(webpages_UserProfile userProfile, string permissionName)
        {
            this.Permission.Reverse().Where(p => p.AtomicCheck == this && p.UserProfile == userProfile
                && p.PermissionName == permissionName).ToList().ForEach(z => this.Permission.Remove(z));
        }

        /// <summary>
        /// Setup permission to qc on this atomic check (both atomic check and atomic check discussion permission)
        /// </summary>
        /// <param name="userProfile"></param>
        public void GrantPermissionForQualityControlOrAccountManager(webpages_UserProfile userProfile)
        {
            // Setup atomic check permission
            new List<string>
                {
                    Models.Permission.kAtomicCheckManagePermission,
                    Models.Permission.kAtomicCheckAssignPermission,
                    Models.Permission.kAtomicCheckViewPermission,
                }.ForEach(p => GrantPermission(userProfile, p));

            if (this.GetInternalAtomicCheckDiscussion() != null)
                this.GetInternalAtomicCheckDiscussion().GrantInternalAtomicCheckManageDiscussionPermission(userProfile);
        }

        /// <summary>
        /// Clear permission to qc on this atomic check (both atomic check and atomic check discussion permission)
        /// </summary>
        /// <param name="userProfile"></param>
        public void RevokePermissionForQualityControlOrAccountManager(webpages_UserProfile userProfile)
        {
            // Clear atomic check permission
            new List<string>
                {
                    Models.Permission.kAtomicCheckManagePermission,
                    Models.Permission.kAtomicCheckAssignPermission,
                    Models.Permission.kAtomicCheckViewPermission,
                }.ForEach(p => RevokePermission(userProfile, p));

            // Clear discussion permission
            if (this.GetInternalAtomicCheckDiscussion() != null)
                this.GetInternalAtomicCheckDiscussion().RevokeInternalAtomicCheckManageDiscussionPermission(userProfile);
        }

        /// <summary>
        /// Setup permission to screener on this atomic check (both atomic check and atomic check discussion permission)
        /// </summary>
        /// <param name="userProfile"></param>
        public void GrantPermissionForScreener(webpages_UserProfile userProfile)
        {
            // Setup atomic check permission
            new List<string>
                {
                    Models.Permission.kAtomicCheckManagePermission,
                    Models.Permission.kAtomicCheckViewPermission,
                }.ForEach(p => GrantPermission(userProfile, p));

            this.Screening.GrantScreeningViewPermission(userProfile);

            if (this.GetInternalAtomicCheckDiscussion() != null)
                this.GetInternalAtomicCheckDiscussion().GrantInternalAtomicCheckManageDiscussionPermission(userProfile);

        }

        /// <summary>
        /// Revoke permission to screener on this atomic check (both atomic check and atomic check discussion permission)
        /// </summary>
        /// <param name="userProfile"></param>
        public void RevokePermissionForScreener(webpages_UserProfile userProfile)
        {
            // Setup atomic check permission
            new List<string>
                {
                    Models.Permission.kAtomicCheckManagePermission,
                    Models.Permission.kAtomicCheckViewPermission,
                }.ForEach(p => RevokePermission(userProfile, p));

            if (this.GetInternalAtomicCheckDiscussion() != null)
                this.GetInternalAtomicCheckDiscussion().RevokeInternalAtomicCheckManageDiscussionPermission(userProfile);
            
            // If screener does not have any atomic check of this screening assigned to him, revoke access to screening
            if (!this.Screening.AtomicCheck.Any(u => u.Screener == userProfile))
                this.Screening.RevokeScreeningViewPermission(userProfile);
        }

        #endregion

        #region Dispatching method

        /// <summary>
        /// Retrieve the screener workload for this atomic check
        /// </summary>
        /// <returns></returns>
        public int GetWorkloadWeight()
        {
            return this.GetTypeOfCheck().GetAverageCompletionRate(this.AtomicCheckCategory);
        }

        /// <summary>
        /// Retrieve the completion minimum working days for this atomic check
        /// </summary>
        /// <returns></returns>
        public int GetCompletionMinimumWorkingDays()
        {
            return this.GetTypeOfCheck().GetCompletionMinimumWorkingDays(this.AtomicCheckCategory);
        }

        #endregion


    }
}
